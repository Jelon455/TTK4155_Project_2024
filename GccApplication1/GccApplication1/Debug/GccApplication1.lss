
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000c90  00000d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800192  00800192  00000db6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000db6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001160  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf7  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000822  00000000  00000000  00002c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  000034ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000613  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b0  00000000  00000000  00003d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000043db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e9       	ldi	r30, 0x90	; 144
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 39       	cpi	r26, 0x92	; 146
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e9       	ldi	r26, 0x92	; 146
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 3a       	cpi	r26, 0xA0	; 160
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  a6:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	e6 e6       	ldi	r30, 0x66	; 102
  b0:	fe e0       	ldi	r31, 0x0E	; 14
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <ADC_Read+0x4>
  b6:	00 00       	nop

uint8_t ADC_Read(uint8_t channel) 
{
	volatile uint8_t* adc_ptr = (volatile uint8_t*)ADC_BASE_ADDRESS;
	_delay_ms(3); //time for the ADC to activate (maybe not necessary)
	*adc_ptr = channel;
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	f4 e1       	ldi	r31, 0x14	; 20
  bc:	80 83       	st	Z, r24
	return *adc_ptr;
  be:	80 81       	ld	r24, Z
}
  c0:	08 95       	ret

000000c2 <Calibrate_Joystick>:

JoystickCalibration Calibrate_Joystick(void) 
{
  c2:	4f 92       	push	r4
  c4:	5f 92       	push	r5
  c6:	6f 92       	push	r6
  c8:	7f 92       	push	r7
  ca:	8f 92       	push	r8
  cc:	9f 92       	push	r9
  ce:	af 92       	push	r10
  d0:	bf 92       	push	r11
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	00 d0       	rcall	.+0      	; 0xe2 <Calibrate_Joystick+0x20>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <Calibrate_Joystick+0x22>
  e4:	00 d0       	rcall	.+0      	; 0xe6 <Calibrate_Joystick+0x24>
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
	JoystickCalibration calibration = {0, 0};
	int32_t x_sum = 0, y_sum = 0;
	const uint16_t num_samples = 500;
	
	printf("Hold the joystic on neutral position!");
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	9f 93       	push	r25
  f0:	8f 93       	push	r24
  f2:	0e 94 24 02 	call	0x448	; 0x448 <printf>
	for (uint16_t i = 0; i < num_samples; i++) 
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	1e 82       	std	Y+6, r1	; 0x06
  fc:	1d 82       	std	Y+5, r1	; 0x05
}

JoystickCalibration Calibrate_Joystick(void) 
{
	JoystickCalibration calibration = {0, 0};
	int32_t x_sum = 0, y_sum = 0;
  fe:	c1 2c       	mov	r12, r1
 100:	d1 2c       	mov	r13, r1
 102:	76 01       	movw	r14, r12
 104:	81 2c       	mov	r8, r1
 106:	91 2c       	mov	r9, r1
 108:	54 01       	movw	r10, r8
	const uint16_t num_samples = 500;
	
	printf("Hold the joystic on neutral position!");
	for (uint16_t i = 0; i < num_samples; i++) 
 10a:	14 c0       	rjmp	.+40     	; 0x134 <Calibrate_Joystick+0x72>
	{
		uint8_t adc_x = ADC_Read(ADC_CHANNEL_X);
 10c:	80 e8       	ldi	r24, 0x80	; 128
 10e:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
 112:	18 2f       	mov	r17, r24
		uint8_t adc_y = ADC_Read(ADC_CHANNEL_Y);
 114:	81 e8       	ldi	r24, 0x81	; 129
 116:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>

		x_sum += adc_x;
 11a:	81 0e       	add	r8, r17
 11c:	91 1c       	adc	r9, r1
 11e:	a1 1c       	adc	r10, r1
 120:	b1 1c       	adc	r11, r1
		y_sum += adc_y;
 122:	c8 0e       	add	r12, r24
 124:	d1 1c       	adc	r13, r1
 126:	e1 1c       	adc	r14, r1
 128:	f1 1c       	adc	r15, r1
	JoystickCalibration calibration = {0, 0};
	int32_t x_sum = 0, y_sum = 0;
	const uint16_t num_samples = 500;
	
	printf("Hold the joystic on neutral position!");
	for (uint16_t i = 0; i < num_samples; i++) 
 12a:	8d 81       	ldd	r24, Y+5	; 0x05
 12c:	9e 81       	ldd	r25, Y+6	; 0x06
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	9e 83       	std	Y+6, r25	; 0x06
 132:	8d 83       	std	Y+5, r24	; 0x05
 134:	8d 81       	ldd	r24, Y+5	; 0x05
 136:	9e 81       	ldd	r25, Y+6	; 0x06
 138:	84 3f       	cpi	r24, 0xF4	; 244
 13a:	91 40       	sbci	r25, 0x01	; 1
 13c:	38 f3       	brcs	.-50     	; 0x10c <Calibrate_Joystick+0x4a>

		x_sum += adc_x;
		y_sum += adc_y;
	}
/*Calculate average values as the neutral position */
	calibration.x_offset = x_sum / num_samples;
 13e:	0f 2e       	mov	r0, r31
 140:	f4 ef       	ldi	r31, 0xF4	; 244
 142:	4f 2e       	mov	r4, r31
 144:	55 24       	eor	r5, r5
 146:	53 94       	inc	r5
 148:	61 2c       	mov	r6, r1
 14a:	71 2c       	mov	r7, r1
 14c:	f0 2d       	mov	r31, r0
 14e:	c5 01       	movw	r24, r10
 150:	b4 01       	movw	r22, r8
 152:	a3 01       	movw	r20, r6
 154:	92 01       	movw	r18, r4
 156:	0e 94 98 01 	call	0x330	; 0x330 <__divmodsi4>
 15a:	3a 83       	std	Y+2, r19	; 0x02
 15c:	29 83       	std	Y+1, r18	; 0x01
	calibration.y_offset = y_sum / num_samples;
 15e:	c7 01       	movw	r24, r14
 160:	b6 01       	movw	r22, r12
 162:	a3 01       	movw	r20, r6
 164:	92 01       	movw	r18, r4
 166:	0e 94 98 01 	call	0x330	; 0x330 <__divmodsi4>
 16a:	3c 83       	std	Y+4, r19	; 0x04
 16c:	2b 83       	std	Y+3, r18	; 0x03
	return calibration;
}
 16e:	69 81       	ldd	r22, Y+1	; 0x01
 170:	7a 81       	ldd	r23, Y+2	; 0x02
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	9c 81       	ldd	r25, Y+4	; 0x04
 176:	26 96       	adiw	r28, 0x06	; 6
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	df 90       	pop	r13
 18e:	cf 90       	pop	r12
 190:	bf 90       	pop	r11
 192:	af 90       	pop	r10
 194:	9f 90       	pop	r9
 196:	8f 90       	pop	r8
 198:	7f 90       	pop	r7
 19a:	6f 90       	pop	r6
 19c:	5f 90       	pop	r5
 19e:	4f 90       	pop	r4
 1a0:	08 95       	ret

000001a2 <Get_Joystick_Position>:

JoystickPosition Get_Joystick_Position(JoystickCalibration calibration) 
{
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	c6 2f       	mov	r28, r22
 1a8:	d8 2f       	mov	r29, r24
	JoystickPosition pos;

	uint8_t adc_x = ADC_Read(ADC_CHANNEL_X) - calibration.x_offset;
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
 1b0:	8c 1b       	sub	r24, r28
 1b2:	c8 2f       	mov	r28, r24
	uint8_t adc_y = ADC_Read(ADC_CHANNEL_Y) - calibration.y_offset;
 1b4:	81 e8       	ldi	r24, 0x81	; 129
 1b6:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
 1ba:	28 2f       	mov	r18, r24
 1bc:	2d 1b       	sub	r18, r29

/*Convert ADC value (0-255) to a percentage (-100% to 100%)*/
    pos.x = ((int16_t)adc_x) * 100 / 128;
 1be:	34 e6       	ldi	r19, 0x64	; 100
 1c0:	c3 9f       	mul	r28, r19
 1c2:	c0 01       	movw	r24, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	88 0f       	add	r24, r24
 1c8:	89 2f       	mov	r24, r25
 1ca:	88 1f       	adc	r24, r24
 1cc:	99 0b       	sbc	r25, r25
    pos.y = ((int16_t)adc_y) * 100 / 128;
 1ce:	44 e6       	ldi	r20, 0x64	; 100
 1d0:	24 9f       	mul	r18, r20
 1d2:	90 01       	movw	r18, r0
 1d4:	11 24       	eor	r1, r1
 1d6:	22 0f       	add	r18, r18
 1d8:	23 2f       	mov	r18, r19
 1da:	22 1f       	adc	r18, r18
 1dc:	33 0b       	sbc	r19, r19

	return pos;
}
 1de:	92 2f       	mov	r25, r18
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <Get_Joystick_Direction>:

JoystickDirection Get_Joystick_Direction(void) 
{
	JoystickPosition pos = Get_Joystick_Position(joystick_calibration);
 1e6:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <__data_end>
 1ea:	70 91 93 01 	lds	r23, 0x0193	; 0x800193 <__data_end+0x1>
 1ee:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end+0x2>
 1f2:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x3>
 1f6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Get_Joystick_Position>
	
/*Direction based on thresholds*/
	if (pos.x > JOYSTICK_NEUTRAL_THRESHOLD) 
 1fa:	85 31       	cpi	r24, 0x15	; 21
 1fc:	44 f4       	brge	.+16     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
	{
		return RIGHT;
	} 
	else if (pos.x < -JOYSTICK_NEUTRAL_THRESHOLD) 
 1fe:	8c 3e       	cpi	r24, 0xEC	; 236
 200:	44 f0       	brlt	.+16     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
	{
		return LEFT;
	} 
	else if (pos.y > JOYSTICK_NEUTRAL_THRESHOLD) 
 202:	95 31       	cpi	r25, 0x15	; 21
 204:	44 f4       	brge	.+16     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
	{
		return UP;
	} 
	else if (pos.y < -JOYSTICK_NEUTRAL_THRESHOLD) 
 206:	9c 3e       	cpi	r25, 0xEC	; 236
 208:	44 f4       	brge	.+16     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		return DOWN;
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	08 95       	ret
	JoystickPosition pos = Get_Joystick_Position(joystick_calibration);
	
/*Direction based on thresholds*/
	if (pos.x > JOYSTICK_NEUTRAL_THRESHOLD) 
	{
		return RIGHT;
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	08 95       	ret
	} 
	else if (pos.x < -JOYSTICK_NEUTRAL_THRESHOLD) 
	{
		return LEFT;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	08 95       	ret
	} 
	else if (pos.y > JOYSTICK_NEUTRAL_THRESHOLD) 
	{
		return UP;
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	08 95       	ret
	{
		return DOWN;
	} 
	else 
	{
		return NEUTRAL;
 21a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 21c:	08 95       	ret

0000021e <Init_ADC>:

void Init_ADC()
{
/*Configure PD5 as output (to provide a clock to the ADC)*/
	DDRD |= (1 << ADC_CLOCK_PIN);
 21e:	81 b3       	in	r24, 0x11	; 17
 220:	80 62       	ori	r24, 0x20	; 32
 222:	81 bb       	out	0x11, r24	; 17
/**/
	TCCR1A &= ~(1 << WGM10) & ~(1 << WGM11);
 224:	8f b5       	in	r24, 0x2f	; 47
 226:	8c 7f       	andi	r24, 0xFC	; 252
 228:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1A0);
 22a:	8f b5       	in	r24, 0x2f	; 47
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	8f bd       	out	0x2f, r24	; 47
/*Prescaler is 1*/
	TCCR1B |= (1 << CS10) | (1 << WGM12) ;
 230:	8e b5       	in	r24, 0x2e	; 46
 232:	89 60       	ori	r24, 0x09	; 9
 234:	8e bd       	out	0x2e, r24	; 46
/*Half of duty cycle in 0-255 8bit timer register*/
	OCR1AL = 0;
 236:	1a bc       	out	0x2a, r1	; 42
	OCR1AH = 0;
 238:	1b bc       	out	0x2b, r1	; 43
 23a:	08 95       	ret

0000023c <main>:

/* === Global variable === */
char tx_data;

int main(void) {
	Init();
 23c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Init>
	USART_Init(UBBR);
 240:	8f e1       	ldi	r24, 0x1F	; 31
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 77 01 	call	0x2ee	; 0x2ee <USART_Init>
	Init_ADC();
 248:	0e 94 0f 01 	call	0x21e	; 0x21e <Init_ADC>
	
	FILE *uart_stream = fdevopen(USART_Transmit_Char, USART_Receive_Char);
 24c:	63 e9       	ldi	r22, 0x93	; 147
 24e:	71 e0       	ldi	r23, 0x01	; 1
 250:	85 e8       	ldi	r24, 0x85	; 133
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <fdevopen>
	
	stdout = uart_stream;
 258:	e6 e9       	ldi	r30, 0x96	; 150
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	93 83       	std	Z+3, r25	; 0x03
 25e:	82 83       	std	Z+2, r24	; 0x02
	stdin = uart_stream;
 260:	91 83       	std	Z+1, r25	; 0x01
 262:	80 83       	st	Z, r24
	
	printf("I am printf!\n\r");
 264:	81 e4       	ldi	r24, 0x41	; 65
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	9f 93       	push	r25
 26a:	8f 93       	push	r24
 26c:	0e 94 24 02 	call	0x448	; 0x448 <printf>
	//SRAM_test();
	
	JoystickPosition pos = {0,0};
	JoystickDirection dir = NEUTRAL;
	
	JoystickCalibration joystick_calibration = Calibrate_Joystick();
 270:	0e 94 61 00 	call	0xc2	; 0xc2 <Calibrate_Joystick>
 274:	6b 01       	movw	r12, r22
 276:	7c 01       	movw	r14, r24
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
	while(1)
	{		
		pos = Get_Joystick_Position(joystick_calibration);
 27c:	c7 01       	movw	r24, r14
 27e:	b6 01       	movw	r22, r12
 280:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Get_Joystick_Position>
		printf("Position x: %d %%, Position y: %d %%\n\r",pos.x, pos.y);
 284:	29 2f       	mov	r18, r25
 286:	09 2e       	mov	r0, r25
 288:	00 0c       	add	r0, r0
 28a:	33 0b       	sbc	r19, r19
 28c:	3f 93       	push	r19
 28e:	9f 93       	push	r25
 290:	28 2f       	mov	r18, r24
 292:	08 2e       	mov	r0, r24
 294:	00 0c       	add	r0, r0
 296:	33 0b       	sbc	r19, r19
 298:	3f 93       	push	r19
 29a:	8f 93       	push	r24
 29c:	80 e5       	ldi	r24, 0x50	; 80
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	9f 93       	push	r25
 2a2:	8f 93       	push	r24
 2a4:	0e 94 24 02 	call	0x448	; 0x448 <printf>
		dir = Get_Joystick_Direction();
 2a8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Get_Joystick_Direction>
		printf("Position of joystick: %d\n\r", dir);
 2ac:	1f 92       	push	r1
 2ae:	8f 93       	push	r24
 2b0:	87 e7       	ldi	r24, 0x77	; 119
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	9f 93       	push	r25
 2b6:	8f 93       	push	r24
 2b8:	0e 94 24 02 	call	0x448	; 0x448 <printf>
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	8f e7       	ldi	r24, 0x7F	; 127
 2c0:	97 e0       	ldi	r25, 0x07	; 7
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <main+0x86>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0x90>
 2cc:	00 00       	nop
 2ce:	8d b7       	in	r24, 0x3d	; 61
 2d0:	9e b7       	in	r25, 0x3e	; 62
 2d2:	0a 96       	adiw	r24, 0x0a	; 10
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	9e bf       	out	0x3e, r25	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	8d bf       	out	0x3d, r24	; 61
 2de:	ce cf       	rjmp	.-100    	; 0x27c <main+0x40>

000002e0 <Init>:
#include "Memory_driver.h"

/* === Function definition === */
void Init() {
/*Enable external memory interface*/
	MCUCR |= (1 << SRE);
 2e0:	85 b7       	in	r24, 0x35	; 53
 2e2:	80 68       	ori	r24, 0x80	; 128
 2e4:	85 bf       	out	0x35, r24	; 53
/*Disabled JTag pins on port C*/
	SFIOR |= (1 << XMM2);
 2e6:	80 b7       	in	r24, 0x30	; 48
 2e8:	80 62       	ori	r24, 0x20	; 32
 2ea:	80 bf       	out	0x30, r24	; 48
 2ec:	08 95       	ret

000002ee <USART_Init>:
char USART_Receive(void)
{
/*Do nothing until data have been recieved and is ready to be read from UDR*/
	while (!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
 2ee:	90 bd       	out	0x20, r25	; 32
 2f0:	89 b9       	out	0x09, r24	; 9
 2f2:	8b b1       	in	r24, 0x0b	; 11
 2f4:	8d 7f       	andi	r24, 0xFD	; 253
 2f6:	8b b9       	out	0x0b, r24	; 11
 2f8:	88 e1       	ldi	r24, 0x18	; 24
 2fa:	8a b9       	out	0x0a, r24	; 10
 2fc:	86 e8       	ldi	r24, 0x86	; 134
 2fe:	80 bd       	out	0x20, r24	; 32
 300:	08 95       	ret

00000302 <USART_Transmit>:
 302:	5d 9b       	sbis	0x0b, 5	; 11
 304:	fe cf       	rjmp	.-4      	; 0x302 <USART_Transmit>
 306:	8c b9       	out	0x0c, r24	; 12
 308:	08 95       	ret

0000030a <USART_Transmit_Char>:

int USART_Transmit_Char(char c, FILE *stream)
{
 30a:	cf 93       	push	r28
 30c:	c8 2f       	mov	r28, r24
	if (c == '\n')
 30e:	8a 30       	cpi	r24, 0x0A	; 10
 310:	19 f4       	brne	.+6      	; 0x318 <USART_Transmit_Char+0xe>
	{
		USART_Transmit('\r');
 312:	8d e0       	ldi	r24, 0x0D	; 13
 314:	0e 94 81 01 	call	0x302	; 0x302 <USART_Transmit>
	}
	USART_Transmit(c);
 318:	8c 2f       	mov	r24, r28
 31a:	0e 94 81 01 	call	0x302	; 0x302 <USART_Transmit>
	return 0;
}
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <USART_Receive_Char>:

int USART_Receive_Char(FILE *stream)
{
/* Wait until data is received */
	while (!(UCSR0A & (1 << RXC0)));
 326:	5f 9b       	sbis	0x0b, 7	; 11
 328:	fe cf       	rjmp	.-4      	; 0x326 <USART_Receive_Char>
	return UDR0;
 32a:	8c b1       	in	r24, 0x0c	; 12
}
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	08 95       	ret

00000330 <__divmodsi4>:
 330:	05 2e       	mov	r0, r21
 332:	97 fb       	bst	r25, 7
 334:	1e f4       	brtc	.+6      	; 0x33c <__divmodsi4+0xc>
 336:	00 94       	com	r0
 338:	0e 94 af 01 	call	0x35e	; 0x35e <__negsi2>
 33c:	57 fd       	sbrc	r21, 7
 33e:	07 d0       	rcall	.+14     	; 0x34e <__divmodsi4_neg2>
 340:	0e 94 b7 01 	call	0x36e	; 0x36e <__udivmodsi4>
 344:	07 fc       	sbrc	r0, 7
 346:	03 d0       	rcall	.+6      	; 0x34e <__divmodsi4_neg2>
 348:	4e f4       	brtc	.+18     	; 0x35c <__divmodsi4_exit>
 34a:	0c 94 af 01 	jmp	0x35e	; 0x35e <__negsi2>

0000034e <__divmodsi4_neg2>:
 34e:	50 95       	com	r21
 350:	40 95       	com	r20
 352:	30 95       	com	r19
 354:	21 95       	neg	r18
 356:	3f 4f       	sbci	r19, 0xFF	; 255
 358:	4f 4f       	sbci	r20, 0xFF	; 255
 35a:	5f 4f       	sbci	r21, 0xFF	; 255

0000035c <__divmodsi4_exit>:
 35c:	08 95       	ret

0000035e <__negsi2>:
 35e:	90 95       	com	r25
 360:	80 95       	com	r24
 362:	70 95       	com	r23
 364:	61 95       	neg	r22
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	8f 4f       	sbci	r24, 0xFF	; 255
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	08 95       	ret

0000036e <__udivmodsi4>:
 36e:	a1 e2       	ldi	r26, 0x21	; 33
 370:	1a 2e       	mov	r1, r26
 372:	aa 1b       	sub	r26, r26
 374:	bb 1b       	sub	r27, r27
 376:	fd 01       	movw	r30, r26
 378:	0d c0       	rjmp	.+26     	; 0x394 <__udivmodsi4_ep>

0000037a <__udivmodsi4_loop>:
 37a:	aa 1f       	adc	r26, r26
 37c:	bb 1f       	adc	r27, r27
 37e:	ee 1f       	adc	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	a2 17       	cp	r26, r18
 384:	b3 07       	cpc	r27, r19
 386:	e4 07       	cpc	r30, r20
 388:	f5 07       	cpc	r31, r21
 38a:	20 f0       	brcs	.+8      	; 0x394 <__udivmodsi4_ep>
 38c:	a2 1b       	sub	r26, r18
 38e:	b3 0b       	sbc	r27, r19
 390:	e4 0b       	sbc	r30, r20
 392:	f5 0b       	sbc	r31, r21

00000394 <__udivmodsi4_ep>:
 394:	66 1f       	adc	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	88 1f       	adc	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	1a 94       	dec	r1
 39e:	69 f7       	brne	.-38     	; 0x37a <__udivmodsi4_loop>
 3a0:	60 95       	com	r22
 3a2:	70 95       	com	r23
 3a4:	80 95       	com	r24
 3a6:	90 95       	com	r25
 3a8:	9b 01       	movw	r18, r22
 3aa:	ac 01       	movw	r20, r24
 3ac:	bd 01       	movw	r22, r26
 3ae:	cf 01       	movw	r24, r30
 3b0:	08 95       	ret

000003b2 <fdevopen>:
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	00 97       	sbiw	r24, 0x00	; 0
 3bc:	31 f4       	brne	.+12     	; 0x3ca <fdevopen+0x18>
 3be:	61 15       	cp	r22, r1
 3c0:	71 05       	cpc	r23, r1
 3c2:	19 f4       	brne	.+6      	; 0x3ca <fdevopen+0x18>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	3a c0       	rjmp	.+116    	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
 3ca:	8b 01       	movw	r16, r22
 3cc:	ec 01       	movw	r28, r24
 3ce:	6e e0       	ldi	r22, 0x0E	; 14
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 1b 04 	call	0x836	; 0x836 <calloc>
 3da:	fc 01       	movw	r30, r24
 3dc:	89 2b       	or	r24, r25
 3de:	91 f3       	breq	.-28     	; 0x3c4 <fdevopen+0x12>
 3e0:	80 e8       	ldi	r24, 0x80	; 128
 3e2:	83 83       	std	Z+3, r24	; 0x03
 3e4:	01 15       	cp	r16, r1
 3e6:	11 05       	cpc	r17, r1
 3e8:	71 f0       	breq	.+28     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3ea:	13 87       	std	Z+11, r17	; 0x0b
 3ec:	02 87       	std	Z+10, r16	; 0x0a
 3ee:	81 e8       	ldi	r24, 0x81	; 129
 3f0:	83 83       	std	Z+3, r24	; 0x03
 3f2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__iob>
 3f6:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__iob+0x1>
 3fa:	89 2b       	or	r24, r25
 3fc:	21 f4       	brne	.+8      	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3fe:	f0 93 97 01 	sts	0x0197, r31	; 0x800197 <__iob+0x1>
 402:	e0 93 96 01 	sts	0x0196, r30	; 0x800196 <__iob>
 406:	20 97       	sbiw	r28, 0x00	; 0
 408:	c9 f0       	breq	.+50     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 40a:	d1 87       	std	Z+9, r29	; 0x09
 40c:	c0 87       	std	Z+8, r28	; 0x08
 40e:	83 81       	ldd	r24, Z+3	; 0x03
 410:	82 60       	ori	r24, 0x02	; 2
 412:	83 83       	std	Z+3, r24	; 0x03
 414:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__iob+0x2>
 418:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <__iob+0x3>
 41c:	89 2b       	or	r24, r25
 41e:	71 f4       	brne	.+28     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 420:	f0 93 99 01 	sts	0x0199, r31	; 0x800199 <__iob+0x3>
 424:	e0 93 98 01 	sts	0x0198, r30	; 0x800198 <__iob+0x2>
 428:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__iob+0x4>
 42c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__iob+0x5>
 430:	89 2b       	or	r24, r25
 432:	21 f4       	brne	.+8      	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 434:	f0 93 9b 01 	sts	0x019B, r31	; 0x80019b <__iob+0x5>
 438:	e0 93 9a 01 	sts	0x019A, r30	; 0x80019a <__iob+0x4>
 43c:	cf 01       	movw	r24, r30
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	08 95       	ret

00000448 <printf>:
 448:	a0 e0       	ldi	r26, 0x00	; 0
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	ea e2       	ldi	r30, 0x2A	; 42
 44e:	f2 e0       	ldi	r31, 0x02	; 2
 450:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__prologue_saves__+0x20>
 454:	ae 01       	movw	r20, r28
 456:	4b 5f       	subi	r20, 0xFB	; 251
 458:	5f 4f       	sbci	r21, 0xFF	; 255
 45a:	fa 01       	movw	r30, r20
 45c:	61 91       	ld	r22, Z+
 45e:	71 91       	ld	r23, Z+
 460:	af 01       	movw	r20, r30
 462:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__iob+0x2>
 466:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <__iob+0x3>
 46a:	0e 94 3a 02 	call	0x474	; 0x474 <vfprintf>
 46e:	e2 e0       	ldi	r30, 0x02	; 2
 470:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__epilogue_restores__+0x20>

00000474 <vfprintf>:
 474:	ab e0       	ldi	r26, 0x0B	; 11
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	e0 e4       	ldi	r30, 0x40	; 64
 47a:	f2 e0       	ldi	r31, 0x02	; 2
 47c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__prologue_saves__>
 480:	6c 01       	movw	r12, r24
 482:	7b 01       	movw	r14, r22
 484:	8a 01       	movw	r16, r20
 486:	fc 01       	movw	r30, r24
 488:	17 82       	std	Z+7, r1	; 0x07
 48a:	16 82       	std	Z+6, r1	; 0x06
 48c:	83 81       	ldd	r24, Z+3	; 0x03
 48e:	81 ff       	sbrs	r24, 1
 490:	cc c1       	rjmp	.+920    	; 0x82a <__stack+0x32b>
 492:	ce 01       	movw	r24, r28
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	3c 01       	movw	r6, r24
 498:	f6 01       	movw	r30, r12
 49a:	93 81       	ldd	r25, Z+3	; 0x03
 49c:	f7 01       	movw	r30, r14
 49e:	93 fd       	sbrc	r25, 3
 4a0:	85 91       	lpm	r24, Z+
 4a2:	93 ff       	sbrs	r25, 3
 4a4:	81 91       	ld	r24, Z+
 4a6:	7f 01       	movw	r14, r30
 4a8:	88 23       	and	r24, r24
 4aa:	09 f4       	brne	.+2      	; 0x4ae <vfprintf+0x3a>
 4ac:	ba c1       	rjmp	.+884    	; 0x822 <__stack+0x323>
 4ae:	85 32       	cpi	r24, 0x25	; 37
 4b0:	39 f4       	brne	.+14     	; 0x4c0 <vfprintf+0x4c>
 4b2:	93 fd       	sbrc	r25, 3
 4b4:	85 91       	lpm	r24, Z+
 4b6:	93 ff       	sbrs	r25, 3
 4b8:	81 91       	ld	r24, Z+
 4ba:	7f 01       	movw	r14, r30
 4bc:	85 32       	cpi	r24, 0x25	; 37
 4be:	29 f4       	brne	.+10     	; 0x4ca <vfprintf+0x56>
 4c0:	b6 01       	movw	r22, r12
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 4c8:	e7 cf       	rjmp	.-50     	; 0x498 <vfprintf+0x24>
 4ca:	91 2c       	mov	r9, r1
 4cc:	21 2c       	mov	r2, r1
 4ce:	31 2c       	mov	r3, r1
 4d0:	ff e1       	ldi	r31, 0x1F	; 31
 4d2:	f3 15       	cp	r31, r3
 4d4:	d8 f0       	brcs	.+54     	; 0x50c <__stack+0xd>
 4d6:	8b 32       	cpi	r24, 0x2B	; 43
 4d8:	79 f0       	breq	.+30     	; 0x4f8 <vfprintf+0x84>
 4da:	38 f4       	brcc	.+14     	; 0x4ea <vfprintf+0x76>
 4dc:	80 32       	cpi	r24, 0x20	; 32
 4de:	79 f0       	breq	.+30     	; 0x4fe <vfprintf+0x8a>
 4e0:	83 32       	cpi	r24, 0x23	; 35
 4e2:	a1 f4       	brne	.+40     	; 0x50c <__stack+0xd>
 4e4:	23 2d       	mov	r18, r3
 4e6:	20 61       	ori	r18, 0x10	; 16
 4e8:	1d c0       	rjmp	.+58     	; 0x524 <__stack+0x25>
 4ea:	8d 32       	cpi	r24, 0x2D	; 45
 4ec:	61 f0       	breq	.+24     	; 0x506 <__stack+0x7>
 4ee:	80 33       	cpi	r24, 0x30	; 48
 4f0:	69 f4       	brne	.+26     	; 0x50c <__stack+0xd>
 4f2:	23 2d       	mov	r18, r3
 4f4:	21 60       	ori	r18, 0x01	; 1
 4f6:	16 c0       	rjmp	.+44     	; 0x524 <__stack+0x25>
 4f8:	83 2d       	mov	r24, r3
 4fa:	82 60       	ori	r24, 0x02	; 2
 4fc:	38 2e       	mov	r3, r24
 4fe:	e3 2d       	mov	r30, r3
 500:	e4 60       	ori	r30, 0x04	; 4
 502:	3e 2e       	mov	r3, r30
 504:	2a c0       	rjmp	.+84     	; 0x55a <__stack+0x5b>
 506:	f3 2d       	mov	r31, r3
 508:	f8 60       	ori	r31, 0x08	; 8
 50a:	1d c0       	rjmp	.+58     	; 0x546 <__stack+0x47>
 50c:	37 fc       	sbrc	r3, 7
 50e:	2d c0       	rjmp	.+90     	; 0x56a <__stack+0x6b>
 510:	20 ed       	ldi	r18, 0xD0	; 208
 512:	28 0f       	add	r18, r24
 514:	2a 30       	cpi	r18, 0x0A	; 10
 516:	40 f0       	brcs	.+16     	; 0x528 <__stack+0x29>
 518:	8e 32       	cpi	r24, 0x2E	; 46
 51a:	b9 f4       	brne	.+46     	; 0x54a <__stack+0x4b>
 51c:	36 fc       	sbrc	r3, 6
 51e:	81 c1       	rjmp	.+770    	; 0x822 <__stack+0x323>
 520:	23 2d       	mov	r18, r3
 522:	20 64       	ori	r18, 0x40	; 64
 524:	32 2e       	mov	r3, r18
 526:	19 c0       	rjmp	.+50     	; 0x55a <__stack+0x5b>
 528:	36 fe       	sbrs	r3, 6
 52a:	06 c0       	rjmp	.+12     	; 0x538 <__stack+0x39>
 52c:	8a e0       	ldi	r24, 0x0A	; 10
 52e:	98 9e       	mul	r9, r24
 530:	20 0d       	add	r18, r0
 532:	11 24       	eor	r1, r1
 534:	92 2e       	mov	r9, r18
 536:	11 c0       	rjmp	.+34     	; 0x55a <__stack+0x5b>
 538:	ea e0       	ldi	r30, 0x0A	; 10
 53a:	2e 9e       	mul	r2, r30
 53c:	20 0d       	add	r18, r0
 53e:	11 24       	eor	r1, r1
 540:	22 2e       	mov	r2, r18
 542:	f3 2d       	mov	r31, r3
 544:	f0 62       	ori	r31, 0x20	; 32
 546:	3f 2e       	mov	r3, r31
 548:	08 c0       	rjmp	.+16     	; 0x55a <__stack+0x5b>
 54a:	8c 36       	cpi	r24, 0x6C	; 108
 54c:	21 f4       	brne	.+8      	; 0x556 <__stack+0x57>
 54e:	83 2d       	mov	r24, r3
 550:	80 68       	ori	r24, 0x80	; 128
 552:	38 2e       	mov	r3, r24
 554:	02 c0       	rjmp	.+4      	; 0x55a <__stack+0x5b>
 556:	88 36       	cpi	r24, 0x68	; 104
 558:	41 f4       	brne	.+16     	; 0x56a <__stack+0x6b>
 55a:	f7 01       	movw	r30, r14
 55c:	93 fd       	sbrc	r25, 3
 55e:	85 91       	lpm	r24, Z+
 560:	93 ff       	sbrs	r25, 3
 562:	81 91       	ld	r24, Z+
 564:	7f 01       	movw	r14, r30
 566:	81 11       	cpse	r24, r1
 568:	b3 cf       	rjmp	.-154    	; 0x4d0 <vfprintf+0x5c>
 56a:	98 2f       	mov	r25, r24
 56c:	9f 7d       	andi	r25, 0xDF	; 223
 56e:	95 54       	subi	r25, 0x45	; 69
 570:	93 30       	cpi	r25, 0x03	; 3
 572:	28 f4       	brcc	.+10     	; 0x57e <__stack+0x7f>
 574:	0c 5f       	subi	r16, 0xFC	; 252
 576:	1f 4f       	sbci	r17, 0xFF	; 255
 578:	9f e3       	ldi	r25, 0x3F	; 63
 57a:	99 83       	std	Y+1, r25	; 0x01
 57c:	0d c0       	rjmp	.+26     	; 0x598 <__stack+0x99>
 57e:	83 36       	cpi	r24, 0x63	; 99
 580:	31 f0       	breq	.+12     	; 0x58e <__stack+0x8f>
 582:	83 37       	cpi	r24, 0x73	; 115
 584:	71 f0       	breq	.+28     	; 0x5a2 <__stack+0xa3>
 586:	83 35       	cpi	r24, 0x53	; 83
 588:	09 f0       	breq	.+2      	; 0x58c <__stack+0x8d>
 58a:	59 c0       	rjmp	.+178    	; 0x63e <__stack+0x13f>
 58c:	21 c0       	rjmp	.+66     	; 0x5d0 <__stack+0xd1>
 58e:	f8 01       	movw	r30, r16
 590:	80 81       	ld	r24, Z
 592:	89 83       	std	Y+1, r24	; 0x01
 594:	0e 5f       	subi	r16, 0xFE	; 254
 596:	1f 4f       	sbci	r17, 0xFF	; 255
 598:	88 24       	eor	r8, r8
 59a:	83 94       	inc	r8
 59c:	91 2c       	mov	r9, r1
 59e:	53 01       	movw	r10, r6
 5a0:	13 c0       	rjmp	.+38     	; 0x5c8 <__stack+0xc9>
 5a2:	28 01       	movw	r4, r16
 5a4:	f2 e0       	ldi	r31, 0x02	; 2
 5a6:	4f 0e       	add	r4, r31
 5a8:	51 1c       	adc	r5, r1
 5aa:	f8 01       	movw	r30, r16
 5ac:	a0 80       	ld	r10, Z
 5ae:	b1 80       	ldd	r11, Z+1	; 0x01
 5b0:	36 fe       	sbrs	r3, 6
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <__stack+0xbb>
 5b4:	69 2d       	mov	r22, r9
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <__stack+0xbf>
 5ba:	6f ef       	ldi	r22, 0xFF	; 255
 5bc:	7f ef       	ldi	r23, 0xFF	; 255
 5be:	c5 01       	movw	r24, r10
 5c0:	0e 94 6a 05 	call	0xad4	; 0xad4 <strnlen>
 5c4:	4c 01       	movw	r8, r24
 5c6:	82 01       	movw	r16, r4
 5c8:	f3 2d       	mov	r31, r3
 5ca:	ff 77       	andi	r31, 0x7F	; 127
 5cc:	3f 2e       	mov	r3, r31
 5ce:	16 c0       	rjmp	.+44     	; 0x5fc <__stack+0xfd>
 5d0:	28 01       	movw	r4, r16
 5d2:	22 e0       	ldi	r18, 0x02	; 2
 5d4:	42 0e       	add	r4, r18
 5d6:	51 1c       	adc	r5, r1
 5d8:	f8 01       	movw	r30, r16
 5da:	a0 80       	ld	r10, Z
 5dc:	b1 80       	ldd	r11, Z+1	; 0x01
 5de:	36 fe       	sbrs	r3, 6
 5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <__stack+0xe9>
 5e2:	69 2d       	mov	r22, r9
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__stack+0xed>
 5e8:	6f ef       	ldi	r22, 0xFF	; 255
 5ea:	7f ef       	ldi	r23, 0xFF	; 255
 5ec:	c5 01       	movw	r24, r10
 5ee:	0e 94 58 05 	call	0xab0	; 0xab0 <strnlen_P>
 5f2:	4c 01       	movw	r8, r24
 5f4:	f3 2d       	mov	r31, r3
 5f6:	f0 68       	ori	r31, 0x80	; 128
 5f8:	3f 2e       	mov	r3, r31
 5fa:	82 01       	movw	r16, r4
 5fc:	33 fc       	sbrc	r3, 3
 5fe:	1b c0       	rjmp	.+54     	; 0x636 <__stack+0x137>
 600:	82 2d       	mov	r24, r2
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	88 16       	cp	r8, r24
 606:	99 06       	cpc	r9, r25
 608:	b0 f4       	brcc	.+44     	; 0x636 <__stack+0x137>
 60a:	b6 01       	movw	r22, r12
 60c:	80 e2       	ldi	r24, 0x20	; 32
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 614:	2a 94       	dec	r2
 616:	f4 cf       	rjmp	.-24     	; 0x600 <__stack+0x101>
 618:	f5 01       	movw	r30, r10
 61a:	37 fc       	sbrc	r3, 7
 61c:	85 91       	lpm	r24, Z+
 61e:	37 fe       	sbrs	r3, 7
 620:	81 91       	ld	r24, Z+
 622:	5f 01       	movw	r10, r30
 624:	b6 01       	movw	r22, r12
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 62c:	21 10       	cpse	r2, r1
 62e:	2a 94       	dec	r2
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	82 1a       	sub	r8, r18
 634:	91 08       	sbc	r9, r1
 636:	81 14       	cp	r8, r1
 638:	91 04       	cpc	r9, r1
 63a:	71 f7       	brne	.-36     	; 0x618 <__stack+0x119>
 63c:	e8 c0       	rjmp	.+464    	; 0x80e <__stack+0x30f>
 63e:	84 36       	cpi	r24, 0x64	; 100
 640:	11 f0       	breq	.+4      	; 0x646 <__stack+0x147>
 642:	89 36       	cpi	r24, 0x69	; 105
 644:	41 f5       	brne	.+80     	; 0x696 <__stack+0x197>
 646:	f8 01       	movw	r30, r16
 648:	37 fe       	sbrs	r3, 7
 64a:	07 c0       	rjmp	.+14     	; 0x65a <__stack+0x15b>
 64c:	60 81       	ld	r22, Z
 64e:	71 81       	ldd	r23, Z+1	; 0x01
 650:	82 81       	ldd	r24, Z+2	; 0x02
 652:	93 81       	ldd	r25, Z+3	; 0x03
 654:	0c 5f       	subi	r16, 0xFC	; 252
 656:	1f 4f       	sbci	r17, 0xFF	; 255
 658:	08 c0       	rjmp	.+16     	; 0x66a <__stack+0x16b>
 65a:	60 81       	ld	r22, Z
 65c:	71 81       	ldd	r23, Z+1	; 0x01
 65e:	07 2e       	mov	r0, r23
 660:	00 0c       	add	r0, r0
 662:	88 0b       	sbc	r24, r24
 664:	99 0b       	sbc	r25, r25
 666:	0e 5f       	subi	r16, 0xFE	; 254
 668:	1f 4f       	sbci	r17, 0xFF	; 255
 66a:	f3 2d       	mov	r31, r3
 66c:	ff 76       	andi	r31, 0x6F	; 111
 66e:	3f 2e       	mov	r3, r31
 670:	97 ff       	sbrs	r25, 7
 672:	09 c0       	rjmp	.+18     	; 0x686 <__stack+0x187>
 674:	90 95       	com	r25
 676:	80 95       	com	r24
 678:	70 95       	com	r23
 67a:	61 95       	neg	r22
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	8f 4f       	sbci	r24, 0xFF	; 255
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	f0 68       	ori	r31, 0x80	; 128
 684:	3f 2e       	mov	r3, r31
 686:	2a e0       	ldi	r18, 0x0A	; 10
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	a3 01       	movw	r20, r6
 68c:	0e 94 b1 05 	call	0xb62	; 0xb62 <__ultoa_invert>
 690:	88 2e       	mov	r8, r24
 692:	86 18       	sub	r8, r6
 694:	45 c0       	rjmp	.+138    	; 0x720 <__stack+0x221>
 696:	85 37       	cpi	r24, 0x75	; 117
 698:	31 f4       	brne	.+12     	; 0x6a6 <__stack+0x1a7>
 69a:	23 2d       	mov	r18, r3
 69c:	2f 7e       	andi	r18, 0xEF	; 239
 69e:	b2 2e       	mov	r11, r18
 6a0:	2a e0       	ldi	r18, 0x0A	; 10
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	25 c0       	rjmp	.+74     	; 0x6f0 <__stack+0x1f1>
 6a6:	93 2d       	mov	r25, r3
 6a8:	99 7f       	andi	r25, 0xF9	; 249
 6aa:	b9 2e       	mov	r11, r25
 6ac:	8f 36       	cpi	r24, 0x6F	; 111
 6ae:	c1 f0       	breq	.+48     	; 0x6e0 <__stack+0x1e1>
 6b0:	18 f4       	brcc	.+6      	; 0x6b8 <__stack+0x1b9>
 6b2:	88 35       	cpi	r24, 0x58	; 88
 6b4:	79 f0       	breq	.+30     	; 0x6d4 <__stack+0x1d5>
 6b6:	b5 c0       	rjmp	.+362    	; 0x822 <__stack+0x323>
 6b8:	80 37       	cpi	r24, 0x70	; 112
 6ba:	19 f0       	breq	.+6      	; 0x6c2 <__stack+0x1c3>
 6bc:	88 37       	cpi	r24, 0x78	; 120
 6be:	21 f0       	breq	.+8      	; 0x6c8 <__stack+0x1c9>
 6c0:	b0 c0       	rjmp	.+352    	; 0x822 <__stack+0x323>
 6c2:	e9 2f       	mov	r30, r25
 6c4:	e0 61       	ori	r30, 0x10	; 16
 6c6:	be 2e       	mov	r11, r30
 6c8:	b4 fe       	sbrs	r11, 4
 6ca:	0d c0       	rjmp	.+26     	; 0x6e6 <__stack+0x1e7>
 6cc:	fb 2d       	mov	r31, r11
 6ce:	f4 60       	ori	r31, 0x04	; 4
 6d0:	bf 2e       	mov	r11, r31
 6d2:	09 c0       	rjmp	.+18     	; 0x6e6 <__stack+0x1e7>
 6d4:	34 fe       	sbrs	r3, 4
 6d6:	0a c0       	rjmp	.+20     	; 0x6ec <__stack+0x1ed>
 6d8:	29 2f       	mov	r18, r25
 6da:	26 60       	ori	r18, 0x06	; 6
 6dc:	b2 2e       	mov	r11, r18
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <__stack+0x1ed>
 6e0:	28 e0       	ldi	r18, 0x08	; 8
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <__stack+0x1f1>
 6e6:	20 e1       	ldi	r18, 0x10	; 16
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <__stack+0x1f1>
 6ec:	20 e1       	ldi	r18, 0x10	; 16
 6ee:	32 e0       	ldi	r19, 0x02	; 2
 6f0:	f8 01       	movw	r30, r16
 6f2:	b7 fe       	sbrs	r11, 7
 6f4:	07 c0       	rjmp	.+14     	; 0x704 <__stack+0x205>
 6f6:	60 81       	ld	r22, Z
 6f8:	71 81       	ldd	r23, Z+1	; 0x01
 6fa:	82 81       	ldd	r24, Z+2	; 0x02
 6fc:	93 81       	ldd	r25, Z+3	; 0x03
 6fe:	0c 5f       	subi	r16, 0xFC	; 252
 700:	1f 4f       	sbci	r17, 0xFF	; 255
 702:	06 c0       	rjmp	.+12     	; 0x710 <__stack+0x211>
 704:	60 81       	ld	r22, Z
 706:	71 81       	ldd	r23, Z+1	; 0x01
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 5f       	subi	r16, 0xFE	; 254
 70e:	1f 4f       	sbci	r17, 0xFF	; 255
 710:	a3 01       	movw	r20, r6
 712:	0e 94 b1 05 	call	0xb62	; 0xb62 <__ultoa_invert>
 716:	88 2e       	mov	r8, r24
 718:	86 18       	sub	r8, r6
 71a:	fb 2d       	mov	r31, r11
 71c:	ff 77       	andi	r31, 0x7F	; 127
 71e:	3f 2e       	mov	r3, r31
 720:	36 fe       	sbrs	r3, 6
 722:	0d c0       	rjmp	.+26     	; 0x73e <__stack+0x23f>
 724:	23 2d       	mov	r18, r3
 726:	2e 7f       	andi	r18, 0xFE	; 254
 728:	a2 2e       	mov	r10, r18
 72a:	89 14       	cp	r8, r9
 72c:	58 f4       	brcc	.+22     	; 0x744 <__stack+0x245>
 72e:	34 fe       	sbrs	r3, 4
 730:	0b c0       	rjmp	.+22     	; 0x748 <__stack+0x249>
 732:	32 fc       	sbrc	r3, 2
 734:	09 c0       	rjmp	.+18     	; 0x748 <__stack+0x249>
 736:	83 2d       	mov	r24, r3
 738:	8e 7e       	andi	r24, 0xEE	; 238
 73a:	a8 2e       	mov	r10, r24
 73c:	05 c0       	rjmp	.+10     	; 0x748 <__stack+0x249>
 73e:	b8 2c       	mov	r11, r8
 740:	a3 2c       	mov	r10, r3
 742:	03 c0       	rjmp	.+6      	; 0x74a <__stack+0x24b>
 744:	b8 2c       	mov	r11, r8
 746:	01 c0       	rjmp	.+2      	; 0x74a <__stack+0x24b>
 748:	b9 2c       	mov	r11, r9
 74a:	a4 fe       	sbrs	r10, 4
 74c:	0f c0       	rjmp	.+30     	; 0x76c <__stack+0x26d>
 74e:	fe 01       	movw	r30, r28
 750:	e8 0d       	add	r30, r8
 752:	f1 1d       	adc	r31, r1
 754:	80 81       	ld	r24, Z
 756:	80 33       	cpi	r24, 0x30	; 48
 758:	21 f4       	brne	.+8      	; 0x762 <__stack+0x263>
 75a:	9a 2d       	mov	r25, r10
 75c:	99 7e       	andi	r25, 0xE9	; 233
 75e:	a9 2e       	mov	r10, r25
 760:	09 c0       	rjmp	.+18     	; 0x774 <__stack+0x275>
 762:	a2 fe       	sbrs	r10, 2
 764:	06 c0       	rjmp	.+12     	; 0x772 <__stack+0x273>
 766:	b3 94       	inc	r11
 768:	b3 94       	inc	r11
 76a:	04 c0       	rjmp	.+8      	; 0x774 <__stack+0x275>
 76c:	8a 2d       	mov	r24, r10
 76e:	86 78       	andi	r24, 0x86	; 134
 770:	09 f0       	breq	.+2      	; 0x774 <__stack+0x275>
 772:	b3 94       	inc	r11
 774:	a3 fc       	sbrc	r10, 3
 776:	11 c0       	rjmp	.+34     	; 0x79a <__stack+0x29b>
 778:	a0 fe       	sbrs	r10, 0
 77a:	06 c0       	rjmp	.+12     	; 0x788 <__stack+0x289>
 77c:	b2 14       	cp	r11, r2
 77e:	88 f4       	brcc	.+34     	; 0x7a2 <__stack+0x2a3>
 780:	28 0c       	add	r2, r8
 782:	92 2c       	mov	r9, r2
 784:	9b 18       	sub	r9, r11
 786:	0e c0       	rjmp	.+28     	; 0x7a4 <__stack+0x2a5>
 788:	b2 14       	cp	r11, r2
 78a:	60 f4       	brcc	.+24     	; 0x7a4 <__stack+0x2a5>
 78c:	b6 01       	movw	r22, r12
 78e:	80 e2       	ldi	r24, 0x20	; 32
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 796:	b3 94       	inc	r11
 798:	f7 cf       	rjmp	.-18     	; 0x788 <__stack+0x289>
 79a:	b2 14       	cp	r11, r2
 79c:	18 f4       	brcc	.+6      	; 0x7a4 <__stack+0x2a5>
 79e:	2b 18       	sub	r2, r11
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <__stack+0x2a7>
 7a2:	98 2c       	mov	r9, r8
 7a4:	21 2c       	mov	r2, r1
 7a6:	a4 fe       	sbrs	r10, 4
 7a8:	10 c0       	rjmp	.+32     	; 0x7ca <__stack+0x2cb>
 7aa:	b6 01       	movw	r22, r12
 7ac:	80 e3       	ldi	r24, 0x30	; 48
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 7b4:	a2 fe       	sbrs	r10, 2
 7b6:	17 c0       	rjmp	.+46     	; 0x7e6 <__stack+0x2e7>
 7b8:	a1 fc       	sbrc	r10, 1
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <__stack+0x2c3>
 7bc:	88 e7       	ldi	r24, 0x78	; 120
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <__stack+0x2c7>
 7c2:	88 e5       	ldi	r24, 0x58	; 88
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	b6 01       	movw	r22, r12
 7c8:	0c c0       	rjmp	.+24     	; 0x7e2 <__stack+0x2e3>
 7ca:	8a 2d       	mov	r24, r10
 7cc:	86 78       	andi	r24, 0x86	; 134
 7ce:	59 f0       	breq	.+22     	; 0x7e6 <__stack+0x2e7>
 7d0:	a1 fe       	sbrs	r10, 1
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <__stack+0x2d9>
 7d4:	8b e2       	ldi	r24, 0x2B	; 43
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <__stack+0x2db>
 7d8:	80 e2       	ldi	r24, 0x20	; 32
 7da:	a7 fc       	sbrc	r10, 7
 7dc:	8d e2       	ldi	r24, 0x2D	; 45
 7de:	b6 01       	movw	r22, r12
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 7e6:	89 14       	cp	r8, r9
 7e8:	38 f4       	brcc	.+14     	; 0x7f8 <__stack+0x2f9>
 7ea:	b6 01       	movw	r22, r12
 7ec:	80 e3       	ldi	r24, 0x30	; 48
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 7f4:	9a 94       	dec	r9
 7f6:	f7 cf       	rjmp	.-18     	; 0x7e6 <__stack+0x2e7>
 7f8:	8a 94       	dec	r8
 7fa:	f3 01       	movw	r30, r6
 7fc:	e8 0d       	add	r30, r8
 7fe:	f1 1d       	adc	r31, r1
 800:	80 81       	ld	r24, Z
 802:	b6 01       	movw	r22, r12
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 80a:	81 10       	cpse	r8, r1
 80c:	f5 cf       	rjmp	.-22     	; 0x7f8 <__stack+0x2f9>
 80e:	22 20       	and	r2, r2
 810:	09 f4       	brne	.+2      	; 0x814 <__stack+0x315>
 812:	42 ce       	rjmp	.-892    	; 0x498 <vfprintf+0x24>
 814:	b6 01       	movw	r22, r12
 816:	80 e2       	ldi	r24, 0x20	; 32
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 75 05 	call	0xaea	; 0xaea <fputc>
 81e:	2a 94       	dec	r2
 820:	f6 cf       	rjmp	.-20     	; 0x80e <__stack+0x30f>
 822:	f6 01       	movw	r30, r12
 824:	86 81       	ldd	r24, Z+6	; 0x06
 826:	97 81       	ldd	r25, Z+7	; 0x07
 828:	02 c0       	rjmp	.+4      	; 0x82e <__stack+0x32f>
 82a:	8f ef       	ldi	r24, 0xFF	; 255
 82c:	9f ef       	ldi	r25, 0xFF	; 255
 82e:	2b 96       	adiw	r28, 0x0b	; 11
 830:	e2 e1       	ldi	r30, 0x12	; 18
 832:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__epilogue_restores__>

00000836 <calloc>:
 836:	0f 93       	push	r16
 838:	1f 93       	push	r17
 83a:	cf 93       	push	r28
 83c:	df 93       	push	r29
 83e:	86 9f       	mul	r24, r22
 840:	80 01       	movw	r16, r0
 842:	87 9f       	mul	r24, r23
 844:	10 0d       	add	r17, r0
 846:	96 9f       	mul	r25, r22
 848:	10 0d       	add	r17, r0
 84a:	11 24       	eor	r1, r1
 84c:	c8 01       	movw	r24, r16
 84e:	0e 94 37 04 	call	0x86e	; 0x86e <malloc>
 852:	ec 01       	movw	r28, r24
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	29 f0       	breq	.+10     	; 0x862 <calloc+0x2c>
 858:	a8 01       	movw	r20, r16
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	0e 94 63 05 	call	0xac6	; 0xac6 <memset>
 862:	ce 01       	movw	r24, r28
 864:	df 91       	pop	r29
 866:	cf 91       	pop	r28
 868:	1f 91       	pop	r17
 86a:	0f 91       	pop	r16
 86c:	08 95       	ret

0000086e <malloc>:
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	82 30       	cpi	r24, 0x02	; 2
 878:	91 05       	cpc	r25, r1
 87a:	10 f4       	brcc	.+4      	; 0x880 <malloc+0x12>
 87c:	82 e0       	ldi	r24, 0x02	; 2
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <__flp>
 884:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <__flp+0x1>
 888:	20 e0       	ldi	r18, 0x00	; 0
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	a0 e0       	ldi	r26, 0x00	; 0
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	30 97       	sbiw	r30, 0x00	; 0
 892:	19 f1       	breq	.+70     	; 0x8da <malloc+0x6c>
 894:	40 81       	ld	r20, Z
 896:	51 81       	ldd	r21, Z+1	; 0x01
 898:	02 81       	ldd	r16, Z+2	; 0x02
 89a:	13 81       	ldd	r17, Z+3	; 0x03
 89c:	48 17       	cp	r20, r24
 89e:	59 07       	cpc	r21, r25
 8a0:	c8 f0       	brcs	.+50     	; 0x8d4 <malloc+0x66>
 8a2:	84 17       	cp	r24, r20
 8a4:	95 07       	cpc	r25, r21
 8a6:	69 f4       	brne	.+26     	; 0x8c2 <malloc+0x54>
 8a8:	10 97       	sbiw	r26, 0x00	; 0
 8aa:	31 f0       	breq	.+12     	; 0x8b8 <malloc+0x4a>
 8ac:	12 96       	adiw	r26, 0x02	; 2
 8ae:	0c 93       	st	X, r16
 8b0:	12 97       	sbiw	r26, 0x02	; 2
 8b2:	13 96       	adiw	r26, 0x03	; 3
 8b4:	1c 93       	st	X, r17
 8b6:	27 c0       	rjmp	.+78     	; 0x906 <malloc+0x98>
 8b8:	00 93 9e 01 	sts	0x019E, r16	; 0x80019e <__flp>
 8bc:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <__flp+0x1>
 8c0:	22 c0       	rjmp	.+68     	; 0x906 <malloc+0x98>
 8c2:	21 15       	cp	r18, r1
 8c4:	31 05       	cpc	r19, r1
 8c6:	19 f0       	breq	.+6      	; 0x8ce <malloc+0x60>
 8c8:	42 17       	cp	r20, r18
 8ca:	53 07       	cpc	r21, r19
 8cc:	18 f4       	brcc	.+6      	; 0x8d4 <malloc+0x66>
 8ce:	9a 01       	movw	r18, r20
 8d0:	bd 01       	movw	r22, r26
 8d2:	ef 01       	movw	r28, r30
 8d4:	df 01       	movw	r26, r30
 8d6:	f8 01       	movw	r30, r16
 8d8:	db cf       	rjmp	.-74     	; 0x890 <malloc+0x22>
 8da:	21 15       	cp	r18, r1
 8dc:	31 05       	cpc	r19, r1
 8de:	f9 f0       	breq	.+62     	; 0x91e <malloc+0xb0>
 8e0:	28 1b       	sub	r18, r24
 8e2:	39 0b       	sbc	r19, r25
 8e4:	24 30       	cpi	r18, 0x04	; 4
 8e6:	31 05       	cpc	r19, r1
 8e8:	80 f4       	brcc	.+32     	; 0x90a <malloc+0x9c>
 8ea:	8a 81       	ldd	r24, Y+2	; 0x02
 8ec:	9b 81       	ldd	r25, Y+3	; 0x03
 8ee:	61 15       	cp	r22, r1
 8f0:	71 05       	cpc	r23, r1
 8f2:	21 f0       	breq	.+8      	; 0x8fc <malloc+0x8e>
 8f4:	fb 01       	movw	r30, r22
 8f6:	93 83       	std	Z+3, r25	; 0x03
 8f8:	82 83       	std	Z+2, r24	; 0x02
 8fa:	04 c0       	rjmp	.+8      	; 0x904 <malloc+0x96>
 8fc:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__flp+0x1>
 900:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__flp>
 904:	fe 01       	movw	r30, r28
 906:	32 96       	adiw	r30, 0x02	; 2
 908:	44 c0       	rjmp	.+136    	; 0x992 <malloc+0x124>
 90a:	fe 01       	movw	r30, r28
 90c:	e2 0f       	add	r30, r18
 90e:	f3 1f       	adc	r31, r19
 910:	81 93       	st	Z+, r24
 912:	91 93       	st	Z+, r25
 914:	22 50       	subi	r18, 0x02	; 2
 916:	31 09       	sbc	r19, r1
 918:	39 83       	std	Y+1, r19	; 0x01
 91a:	28 83       	st	Y, r18
 91c:	3a c0       	rjmp	.+116    	; 0x992 <malloc+0x124>
 91e:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 922:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 926:	23 2b       	or	r18, r19
 928:	41 f4       	brne	.+16     	; 0x93a <malloc+0xcc>
 92a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 92e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 932:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <__brkval+0x1>
 936:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <__brkval>
 93a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 93e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 942:	21 15       	cp	r18, r1
 944:	31 05       	cpc	r19, r1
 946:	41 f4       	brne	.+16     	; 0x958 <malloc+0xea>
 948:	2d b7       	in	r18, 0x3d	; 61
 94a:	3e b7       	in	r19, 0x3e	; 62
 94c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 950:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 954:	24 1b       	sub	r18, r20
 956:	35 0b       	sbc	r19, r21
 958:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <__brkval>
 95c:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <__brkval+0x1>
 960:	e2 17       	cp	r30, r18
 962:	f3 07       	cpc	r31, r19
 964:	a0 f4       	brcc	.+40     	; 0x98e <malloc+0x120>
 966:	2e 1b       	sub	r18, r30
 968:	3f 0b       	sbc	r19, r31
 96a:	28 17       	cp	r18, r24
 96c:	39 07       	cpc	r19, r25
 96e:	78 f0       	brcs	.+30     	; 0x98e <malloc+0x120>
 970:	ac 01       	movw	r20, r24
 972:	4e 5f       	subi	r20, 0xFE	; 254
 974:	5f 4f       	sbci	r21, 0xFF	; 255
 976:	24 17       	cp	r18, r20
 978:	35 07       	cpc	r19, r21
 97a:	48 f0       	brcs	.+18     	; 0x98e <malloc+0x120>
 97c:	4e 0f       	add	r20, r30
 97e:	5f 1f       	adc	r21, r31
 980:	50 93 9d 01 	sts	0x019D, r21	; 0x80019d <__brkval+0x1>
 984:	40 93 9c 01 	sts	0x019C, r20	; 0x80019c <__brkval>
 988:	81 93       	st	Z+, r24
 98a:	91 93       	st	Z+, r25
 98c:	02 c0       	rjmp	.+4      	; 0x992 <malloc+0x124>
 98e:	e0 e0       	ldi	r30, 0x00	; 0
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	cf 01       	movw	r24, r30
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	1f 91       	pop	r17
 99a:	0f 91       	pop	r16
 99c:	08 95       	ret

0000099e <free>:
 99e:	cf 93       	push	r28
 9a0:	df 93       	push	r29
 9a2:	00 97       	sbiw	r24, 0x00	; 0
 9a4:	09 f4       	brne	.+2      	; 0x9a8 <free+0xa>
 9a6:	81 c0       	rjmp	.+258    	; 0xaaa <free+0x10c>
 9a8:	fc 01       	movw	r30, r24
 9aa:	32 97       	sbiw	r30, 0x02	; 2
 9ac:	13 82       	std	Z+3, r1	; 0x03
 9ae:	12 82       	std	Z+2, r1	; 0x02
 9b0:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <__flp>
 9b4:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <__flp+0x1>
 9b8:	10 97       	sbiw	r26, 0x00	; 0
 9ba:	81 f4       	brne	.+32     	; 0x9dc <free+0x3e>
 9bc:	20 81       	ld	r18, Z
 9be:	31 81       	ldd	r19, Z+1	; 0x01
 9c0:	82 0f       	add	r24, r18
 9c2:	93 1f       	adc	r25, r19
 9c4:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 9c8:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 9cc:	28 17       	cp	r18, r24
 9ce:	39 07       	cpc	r19, r25
 9d0:	51 f5       	brne	.+84     	; 0xa26 <free+0x88>
 9d2:	f0 93 9d 01 	sts	0x019D, r31	; 0x80019d <__brkval+0x1>
 9d6:	e0 93 9c 01 	sts	0x019C, r30	; 0x80019c <__brkval>
 9da:	67 c0       	rjmp	.+206    	; 0xaaa <free+0x10c>
 9dc:	ed 01       	movw	r28, r26
 9de:	20 e0       	ldi	r18, 0x00	; 0
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	ce 17       	cp	r28, r30
 9e4:	df 07       	cpc	r29, r31
 9e6:	40 f4       	brcc	.+16     	; 0x9f8 <free+0x5a>
 9e8:	4a 81       	ldd	r20, Y+2	; 0x02
 9ea:	5b 81       	ldd	r21, Y+3	; 0x03
 9ec:	9e 01       	movw	r18, r28
 9ee:	41 15       	cp	r20, r1
 9f0:	51 05       	cpc	r21, r1
 9f2:	f1 f0       	breq	.+60     	; 0xa30 <free+0x92>
 9f4:	ea 01       	movw	r28, r20
 9f6:	f5 cf       	rjmp	.-22     	; 0x9e2 <free+0x44>
 9f8:	d3 83       	std	Z+3, r29	; 0x03
 9fa:	c2 83       	std	Z+2, r28	; 0x02
 9fc:	40 81       	ld	r20, Z
 9fe:	51 81       	ldd	r21, Z+1	; 0x01
 a00:	84 0f       	add	r24, r20
 a02:	95 1f       	adc	r25, r21
 a04:	c8 17       	cp	r28, r24
 a06:	d9 07       	cpc	r29, r25
 a08:	59 f4       	brne	.+22     	; 0xa20 <free+0x82>
 a0a:	88 81       	ld	r24, Y
 a0c:	99 81       	ldd	r25, Y+1	; 0x01
 a0e:	84 0f       	add	r24, r20
 a10:	95 1f       	adc	r25, r21
 a12:	02 96       	adiw	r24, 0x02	; 2
 a14:	91 83       	std	Z+1, r25	; 0x01
 a16:	80 83       	st	Z, r24
 a18:	8a 81       	ldd	r24, Y+2	; 0x02
 a1a:	9b 81       	ldd	r25, Y+3	; 0x03
 a1c:	93 83       	std	Z+3, r25	; 0x03
 a1e:	82 83       	std	Z+2, r24	; 0x02
 a20:	21 15       	cp	r18, r1
 a22:	31 05       	cpc	r19, r1
 a24:	29 f4       	brne	.+10     	; 0xa30 <free+0x92>
 a26:	f0 93 9f 01 	sts	0x019F, r31	; 0x80019f <__flp+0x1>
 a2a:	e0 93 9e 01 	sts	0x019E, r30	; 0x80019e <__flp>
 a2e:	3d c0       	rjmp	.+122    	; 0xaaa <free+0x10c>
 a30:	e9 01       	movw	r28, r18
 a32:	fb 83       	std	Y+3, r31	; 0x03
 a34:	ea 83       	std	Y+2, r30	; 0x02
 a36:	49 91       	ld	r20, Y+
 a38:	59 91       	ld	r21, Y+
 a3a:	c4 0f       	add	r28, r20
 a3c:	d5 1f       	adc	r29, r21
 a3e:	ec 17       	cp	r30, r28
 a40:	fd 07       	cpc	r31, r29
 a42:	61 f4       	brne	.+24     	; 0xa5c <free+0xbe>
 a44:	80 81       	ld	r24, Z
 a46:	91 81       	ldd	r25, Z+1	; 0x01
 a48:	84 0f       	add	r24, r20
 a4a:	95 1f       	adc	r25, r21
 a4c:	02 96       	adiw	r24, 0x02	; 2
 a4e:	e9 01       	movw	r28, r18
 a50:	99 83       	std	Y+1, r25	; 0x01
 a52:	88 83       	st	Y, r24
 a54:	82 81       	ldd	r24, Z+2	; 0x02
 a56:	93 81       	ldd	r25, Z+3	; 0x03
 a58:	9b 83       	std	Y+3, r25	; 0x03
 a5a:	8a 83       	std	Y+2, r24	; 0x02
 a5c:	e0 e0       	ldi	r30, 0x00	; 0
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	12 96       	adiw	r26, 0x02	; 2
 a62:	8d 91       	ld	r24, X+
 a64:	9c 91       	ld	r25, X
 a66:	13 97       	sbiw	r26, 0x03	; 3
 a68:	00 97       	sbiw	r24, 0x00	; 0
 a6a:	19 f0       	breq	.+6      	; 0xa72 <free+0xd4>
 a6c:	fd 01       	movw	r30, r26
 a6e:	dc 01       	movw	r26, r24
 a70:	f7 cf       	rjmp	.-18     	; 0xa60 <free+0xc2>
 a72:	8d 91       	ld	r24, X+
 a74:	9c 91       	ld	r25, X
 a76:	11 97       	sbiw	r26, 0x01	; 1
 a78:	9d 01       	movw	r18, r26
 a7a:	2e 5f       	subi	r18, 0xFE	; 254
 a7c:	3f 4f       	sbci	r19, 0xFF	; 255
 a7e:	82 0f       	add	r24, r18
 a80:	93 1f       	adc	r25, r19
 a82:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 a86:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 a8a:	28 17       	cp	r18, r24
 a8c:	39 07       	cpc	r19, r25
 a8e:	69 f4       	brne	.+26     	; 0xaaa <free+0x10c>
 a90:	30 97       	sbiw	r30, 0x00	; 0
 a92:	29 f4       	brne	.+10     	; 0xa9e <free+0x100>
 a94:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <__flp+0x1>
 a98:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__flp>
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <free+0x104>
 a9e:	13 82       	std	Z+3, r1	; 0x03
 aa0:	12 82       	std	Z+2, r1	; 0x02
 aa2:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <__brkval+0x1>
 aa6:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <__brkval>
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	08 95       	ret

00000ab0 <strnlen_P>:
 ab0:	fc 01       	movw	r30, r24
 ab2:	05 90       	lpm	r0, Z+
 ab4:	61 50       	subi	r22, 0x01	; 1
 ab6:	70 40       	sbci	r23, 0x00	; 0
 ab8:	01 10       	cpse	r0, r1
 aba:	d8 f7       	brcc	.-10     	; 0xab2 <strnlen_P+0x2>
 abc:	80 95       	com	r24
 abe:	90 95       	com	r25
 ac0:	8e 0f       	add	r24, r30
 ac2:	9f 1f       	adc	r25, r31
 ac4:	08 95       	ret

00000ac6 <memset>:
 ac6:	dc 01       	movw	r26, r24
 ac8:	01 c0       	rjmp	.+2      	; 0xacc <memset+0x6>
 aca:	6d 93       	st	X+, r22
 acc:	41 50       	subi	r20, 0x01	; 1
 ace:	50 40       	sbci	r21, 0x00	; 0
 ad0:	e0 f7       	brcc	.-8      	; 0xaca <memset+0x4>
 ad2:	08 95       	ret

00000ad4 <strnlen>:
 ad4:	fc 01       	movw	r30, r24
 ad6:	61 50       	subi	r22, 0x01	; 1
 ad8:	70 40       	sbci	r23, 0x00	; 0
 ada:	01 90       	ld	r0, Z+
 adc:	01 10       	cpse	r0, r1
 ade:	d8 f7       	brcc	.-10     	; 0xad6 <strnlen+0x2>
 ae0:	80 95       	com	r24
 ae2:	90 95       	com	r25
 ae4:	8e 0f       	add	r24, r30
 ae6:	9f 1f       	adc	r25, r31
 ae8:	08 95       	ret

00000aea <fputc>:
 aea:	0f 93       	push	r16
 aec:	1f 93       	push	r17
 aee:	cf 93       	push	r28
 af0:	df 93       	push	r29
 af2:	fb 01       	movw	r30, r22
 af4:	23 81       	ldd	r18, Z+3	; 0x03
 af6:	21 fd       	sbrc	r18, 1
 af8:	03 c0       	rjmp	.+6      	; 0xb00 <fputc+0x16>
 afa:	8f ef       	ldi	r24, 0xFF	; 255
 afc:	9f ef       	ldi	r25, 0xFF	; 255
 afe:	2c c0       	rjmp	.+88     	; 0xb58 <fputc+0x6e>
 b00:	22 ff       	sbrs	r18, 2
 b02:	16 c0       	rjmp	.+44     	; 0xb30 <fputc+0x46>
 b04:	46 81       	ldd	r20, Z+6	; 0x06
 b06:	57 81       	ldd	r21, Z+7	; 0x07
 b08:	24 81       	ldd	r18, Z+4	; 0x04
 b0a:	35 81       	ldd	r19, Z+5	; 0x05
 b0c:	42 17       	cp	r20, r18
 b0e:	53 07       	cpc	r21, r19
 b10:	44 f4       	brge	.+16     	; 0xb22 <fputc+0x38>
 b12:	a0 81       	ld	r26, Z
 b14:	b1 81       	ldd	r27, Z+1	; 0x01
 b16:	9d 01       	movw	r18, r26
 b18:	2f 5f       	subi	r18, 0xFF	; 255
 b1a:	3f 4f       	sbci	r19, 0xFF	; 255
 b1c:	31 83       	std	Z+1, r19	; 0x01
 b1e:	20 83       	st	Z, r18
 b20:	8c 93       	st	X, r24
 b22:	26 81       	ldd	r18, Z+6	; 0x06
 b24:	37 81       	ldd	r19, Z+7	; 0x07
 b26:	2f 5f       	subi	r18, 0xFF	; 255
 b28:	3f 4f       	sbci	r19, 0xFF	; 255
 b2a:	37 83       	std	Z+7, r19	; 0x07
 b2c:	26 83       	std	Z+6, r18	; 0x06
 b2e:	14 c0       	rjmp	.+40     	; 0xb58 <fputc+0x6e>
 b30:	8b 01       	movw	r16, r22
 b32:	ec 01       	movw	r28, r24
 b34:	fb 01       	movw	r30, r22
 b36:	00 84       	ldd	r0, Z+8	; 0x08
 b38:	f1 85       	ldd	r31, Z+9	; 0x09
 b3a:	e0 2d       	mov	r30, r0
 b3c:	09 95       	icall
 b3e:	89 2b       	or	r24, r25
 b40:	e1 f6       	brne	.-72     	; 0xafa <fputc+0x10>
 b42:	d8 01       	movw	r26, r16
 b44:	16 96       	adiw	r26, 0x06	; 6
 b46:	8d 91       	ld	r24, X+
 b48:	9c 91       	ld	r25, X
 b4a:	17 97       	sbiw	r26, 0x07	; 7
 b4c:	01 96       	adiw	r24, 0x01	; 1
 b4e:	17 96       	adiw	r26, 0x07	; 7
 b50:	9c 93       	st	X, r25
 b52:	8e 93       	st	-X, r24
 b54:	16 97       	sbiw	r26, 0x06	; 6
 b56:	ce 01       	movw	r24, r28
 b58:	df 91       	pop	r29
 b5a:	cf 91       	pop	r28
 b5c:	1f 91       	pop	r17
 b5e:	0f 91       	pop	r16
 b60:	08 95       	ret

00000b62 <__ultoa_invert>:
 b62:	fa 01       	movw	r30, r20
 b64:	aa 27       	eor	r26, r26
 b66:	28 30       	cpi	r18, 0x08	; 8
 b68:	51 f1       	breq	.+84     	; 0xbbe <__ultoa_invert+0x5c>
 b6a:	20 31       	cpi	r18, 0x10	; 16
 b6c:	81 f1       	breq	.+96     	; 0xbce <__ultoa_invert+0x6c>
 b6e:	e8 94       	clt
 b70:	6f 93       	push	r22
 b72:	6e 7f       	andi	r22, 0xFE	; 254
 b74:	6e 5f       	subi	r22, 0xFE	; 254
 b76:	7f 4f       	sbci	r23, 0xFF	; 255
 b78:	8f 4f       	sbci	r24, 0xFF	; 255
 b7a:	9f 4f       	sbci	r25, 0xFF	; 255
 b7c:	af 4f       	sbci	r26, 0xFF	; 255
 b7e:	b1 e0       	ldi	r27, 0x01	; 1
 b80:	3e d0       	rcall	.+124    	; 0xbfe <__ultoa_invert+0x9c>
 b82:	b4 e0       	ldi	r27, 0x04	; 4
 b84:	3c d0       	rcall	.+120    	; 0xbfe <__ultoa_invert+0x9c>
 b86:	67 0f       	add	r22, r23
 b88:	78 1f       	adc	r23, r24
 b8a:	89 1f       	adc	r24, r25
 b8c:	9a 1f       	adc	r25, r26
 b8e:	a1 1d       	adc	r26, r1
 b90:	68 0f       	add	r22, r24
 b92:	79 1f       	adc	r23, r25
 b94:	8a 1f       	adc	r24, r26
 b96:	91 1d       	adc	r25, r1
 b98:	a1 1d       	adc	r26, r1
 b9a:	6a 0f       	add	r22, r26
 b9c:	71 1d       	adc	r23, r1
 b9e:	81 1d       	adc	r24, r1
 ba0:	91 1d       	adc	r25, r1
 ba2:	a1 1d       	adc	r26, r1
 ba4:	20 d0       	rcall	.+64     	; 0xbe6 <__ultoa_invert+0x84>
 ba6:	09 f4       	brne	.+2      	; 0xbaa <__ultoa_invert+0x48>
 ba8:	68 94       	set
 baa:	3f 91       	pop	r19
 bac:	2a e0       	ldi	r18, 0x0A	; 10
 bae:	26 9f       	mul	r18, r22
 bb0:	11 24       	eor	r1, r1
 bb2:	30 19       	sub	r19, r0
 bb4:	30 5d       	subi	r19, 0xD0	; 208
 bb6:	31 93       	st	Z+, r19
 bb8:	de f6       	brtc	.-74     	; 0xb70 <__ultoa_invert+0xe>
 bba:	cf 01       	movw	r24, r30
 bbc:	08 95       	ret
 bbe:	46 2f       	mov	r20, r22
 bc0:	47 70       	andi	r20, 0x07	; 7
 bc2:	40 5d       	subi	r20, 0xD0	; 208
 bc4:	41 93       	st	Z+, r20
 bc6:	b3 e0       	ldi	r27, 0x03	; 3
 bc8:	0f d0       	rcall	.+30     	; 0xbe8 <__ultoa_invert+0x86>
 bca:	c9 f7       	brne	.-14     	; 0xbbe <__ultoa_invert+0x5c>
 bcc:	f6 cf       	rjmp	.-20     	; 0xbba <__ultoa_invert+0x58>
 bce:	46 2f       	mov	r20, r22
 bd0:	4f 70       	andi	r20, 0x0F	; 15
 bd2:	40 5d       	subi	r20, 0xD0	; 208
 bd4:	4a 33       	cpi	r20, 0x3A	; 58
 bd6:	18 f0       	brcs	.+6      	; 0xbde <__ultoa_invert+0x7c>
 bd8:	49 5d       	subi	r20, 0xD9	; 217
 bda:	31 fd       	sbrc	r19, 1
 bdc:	40 52       	subi	r20, 0x20	; 32
 bde:	41 93       	st	Z+, r20
 be0:	02 d0       	rcall	.+4      	; 0xbe6 <__ultoa_invert+0x84>
 be2:	a9 f7       	brne	.-22     	; 0xbce <__ultoa_invert+0x6c>
 be4:	ea cf       	rjmp	.-44     	; 0xbba <__ultoa_invert+0x58>
 be6:	b4 e0       	ldi	r27, 0x04	; 4
 be8:	a6 95       	lsr	r26
 bea:	97 95       	ror	r25
 bec:	87 95       	ror	r24
 bee:	77 95       	ror	r23
 bf0:	67 95       	ror	r22
 bf2:	ba 95       	dec	r27
 bf4:	c9 f7       	brne	.-14     	; 0xbe8 <__ultoa_invert+0x86>
 bf6:	00 97       	sbiw	r24, 0x00	; 0
 bf8:	61 05       	cpc	r22, r1
 bfa:	71 05       	cpc	r23, r1
 bfc:	08 95       	ret
 bfe:	9b 01       	movw	r18, r22
 c00:	ac 01       	movw	r20, r24
 c02:	0a 2e       	mov	r0, r26
 c04:	06 94       	lsr	r0
 c06:	57 95       	ror	r21
 c08:	47 95       	ror	r20
 c0a:	37 95       	ror	r19
 c0c:	27 95       	ror	r18
 c0e:	ba 95       	dec	r27
 c10:	c9 f7       	brne	.-14     	; 0xc04 <__ultoa_invert+0xa2>
 c12:	62 0f       	add	r22, r18
 c14:	73 1f       	adc	r23, r19
 c16:	84 1f       	adc	r24, r20
 c18:	95 1f       	adc	r25, r21
 c1a:	a0 1d       	adc	r26, r0
 c1c:	08 95       	ret

00000c1e <__prologue_saves__>:
 c1e:	2f 92       	push	r2
 c20:	3f 92       	push	r3
 c22:	4f 92       	push	r4
 c24:	5f 92       	push	r5
 c26:	6f 92       	push	r6
 c28:	7f 92       	push	r7
 c2a:	8f 92       	push	r8
 c2c:	9f 92       	push	r9
 c2e:	af 92       	push	r10
 c30:	bf 92       	push	r11
 c32:	cf 92       	push	r12
 c34:	df 92       	push	r13
 c36:	ef 92       	push	r14
 c38:	ff 92       	push	r15
 c3a:	0f 93       	push	r16
 c3c:	1f 93       	push	r17
 c3e:	cf 93       	push	r28
 c40:	df 93       	push	r29
 c42:	cd b7       	in	r28, 0x3d	; 61
 c44:	de b7       	in	r29, 0x3e	; 62
 c46:	ca 1b       	sub	r28, r26
 c48:	db 0b       	sbc	r29, r27
 c4a:	0f b6       	in	r0, 0x3f	; 63
 c4c:	f8 94       	cli
 c4e:	de bf       	out	0x3e, r29	; 62
 c50:	0f be       	out	0x3f, r0	; 63
 c52:	cd bf       	out	0x3d, r28	; 61
 c54:	09 94       	ijmp

00000c56 <__epilogue_restores__>:
 c56:	2a 88       	ldd	r2, Y+18	; 0x12
 c58:	39 88       	ldd	r3, Y+17	; 0x11
 c5a:	48 88       	ldd	r4, Y+16	; 0x10
 c5c:	5f 84       	ldd	r5, Y+15	; 0x0f
 c5e:	6e 84       	ldd	r6, Y+14	; 0x0e
 c60:	7d 84       	ldd	r7, Y+13	; 0x0d
 c62:	8c 84       	ldd	r8, Y+12	; 0x0c
 c64:	9b 84       	ldd	r9, Y+11	; 0x0b
 c66:	aa 84       	ldd	r10, Y+10	; 0x0a
 c68:	b9 84       	ldd	r11, Y+9	; 0x09
 c6a:	c8 84       	ldd	r12, Y+8	; 0x08
 c6c:	df 80       	ldd	r13, Y+7	; 0x07
 c6e:	ee 80       	ldd	r14, Y+6	; 0x06
 c70:	fd 80       	ldd	r15, Y+5	; 0x05
 c72:	0c 81       	ldd	r16, Y+4	; 0x04
 c74:	1b 81       	ldd	r17, Y+3	; 0x03
 c76:	aa 81       	ldd	r26, Y+2	; 0x02
 c78:	b9 81       	ldd	r27, Y+1	; 0x01
 c7a:	ce 0f       	add	r28, r30
 c7c:	d1 1d       	adc	r29, r1
 c7e:	0f b6       	in	r0, 0x3f	; 63
 c80:	f8 94       	cli
 c82:	de bf       	out	0x3e, r29	; 62
 c84:	0f be       	out	0x3f, r0	; 63
 c86:	cd bf       	out	0x3d, r28	; 61
 c88:	ed 01       	movw	r28, r26
 c8a:	08 95       	ret

00000c8c <_exit>:
 c8c:	f8 94       	cli

00000c8e <__stop_program>:
 c8e:	ff cf       	rjmp	.-2      	; 0xc8e <__stop_program>
