
PinPongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000053a  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  000005d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b9c  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e52  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e61  00000000  00000000  000031a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00004008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000725  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e44  00000000  00000000  00004add  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00005921  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e3       	ldi	r30, 0x3A	; 58
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 31       	cpi	r26, 0x10	; 16
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  a6:	0c 94 9b 02 	jmp	0x536	; 0x536 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <Init_ADC>:
}

void Init_ADC()
{
/*Configure PD5 as output (to provide a clock to the ADC)*/
	DDRD |= (1 << ADC_CLOCK_PIN);
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	81 bb       	out	0x11, r24	; 17
/**/
	TCCR1A &= ~(1 << WGM10) & ~(1 << WGM11);
  b4:	8f b5       	in	r24, 0x2f	; 47
  b6:	8c 7f       	andi	r24, 0xFC	; 252
  b8:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1A0);
  ba:	8f b5       	in	r24, 0x2f	; 47
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	8f bd       	out	0x2f, r24	; 47
/*Prescaler is 1*/
	TCCR1B |= (1 << CS10) | (1 << WGM12) ;
  c0:	8e b5       	in	r24, 0x2e	; 46
  c2:	89 60       	ori	r24, 0x09	; 9
  c4:	8e bd       	out	0x2e, r24	; 46
/*Half of duty cycle in 0-255 8bit timer register*/
	OCR1AL = 0;
  c6:	1a bc       	out	0x2a, r1	; 42
	OCR1AH = 0;
  c8:	1b bc       	out	0x2b, r1	; 43
  ca:	08 95       	ret

000000cc <SPI_Init>:
	return SPDR;
}

/* MCP2515 Select (CS Low) */
void SPI_Select(void) {
	PORTB &= ~(1 << CS_MCP2515);  // Pull CS low
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	80 6b       	ori	r24, 0xB0	; 176
  d0:	87 bb       	out	0x17, r24	; 23
  d2:	87 b3       	in	r24, 0x17	; 23
  d4:	8f 7b       	andi	r24, 0xBF	; 191
  d6:	87 bb       	out	0x17, r24	; 23
  d8:	81 e5       	ldi	r24, 0x51	; 81
  da:	8d b9       	out	0x0d, r24	; 13
  dc:	08 95       	ret

000000de <SPI_Transmit>:
  de:	8f b9       	out	0x0f, r24	; 15
  e0:	77 9b       	sbis	0x0e, 7	; 14
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <SPI_Transmit+0x2>
  e4:	8f b1       	in	r24, 0x0f	; 15
  e6:	08 95       	ret

000000e8 <SPI_Deselect>:
}

/* MCP2515 Deselect (CS High) */
void SPI_Deselect(void) {
	PORTB |= (1 << CS_MCP2515);   // Pull CS high
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	88 bb       	out	0x18, r24	; 24
  ee:	08 95       	ret

000000f0 <MCP2515_Reset>:
}

/* MCP2515 Reset */
void MCP2515_Reset(void) {
	//SPI_Select();
	SPI_Transmit(MCP2515_RESET);  // Send reset command
  f0:	80 ec       	ldi	r24, 0xC0	; 192
  f2:	0e 94 6f 00 	call	0xde	; 0xde <SPI_Transmit>
	SPI_Deselect();
  f6:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_Deselect>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	83 ec       	ldi	r24, 0xC3	; 195
  fc:	99 e0       	ldi	r25, 0x09	; 9
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <MCP2515_Reset+0xe>
 102:	00 c0       	rjmp	.+0      	; 0x104 <MCP2515_Reset+0x14>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <MCP2515_Init>:
#include "CAN_control.h"
#include <util/delay.h>

/* MCP2515 Initialization */
void MCP2515_Init(void) {
	SPI_Init();           // Initialize SPI
 108:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_Init>
	MCP2515_Reset();      // Reset MCP2515
 10c:	0e 94 78 00 	call	0xf0	; 0xf0 <MCP2515_Reset>
 110:	83 ed       	ldi	r24, 0xD3	; 211
 112:	90 e3       	ldi	r25, 0x30	; 48
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <MCP2515_Init+0xc>
 118:	00 c0       	rjmp	.+0      	; 0x11a <MCP2515_Init+0x12>
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <MCP2515_Read>:
	SPI_Deselect();
	_delay_ms(10);  // Wait for MCP2515 to reset
}

/* MCP2515 Read Register */
uint8_t MCP2515_Read(uint8_t address) {
 11e:	cf 93       	push	r28
 120:	c8 2f       	mov	r28, r24
	uint8_t result;
	//SPI_Select();
	SPI_Transmit(MCP2515_READ);   // Send read command
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 6f 00 	call	0xde	; 0xde <SPI_Transmit>
	SPI_Transmit(address);        // Send address to read
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 6f 00 	call	0xde	; 0xde <SPI_Transmit>
	result = SPI_Transmit(0xFF);  // Send dummy data to receive the data
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	0e 94 6f 00 	call	0xde	; 0xde <SPI_Transmit>
	//SPI_Deselect();
	return result;
}
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <MCP2515_Write>:

/* MCP2515 Write Register */
void MCP2515_Write(uint8_t address, uint8_t data) {
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	d8 2f       	mov	r29, r24
 13e:	c6 2f       	mov	r28, r22
	//SPI_Select();
	SPI_Transmit(MCP2515_WRITE);  // Send write command
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 6f 00 	call	0xde	; 0xde <SPI_Transmit>
	SPI_Transmit(address);        // Send address to write
 146:	8d 2f       	mov	r24, r29
 148:	0e 94 6f 00 	call	0xde	; 0xde <SPI_Transmit>
	SPI_Transmit(data);           // Send data to write
 14c:	8c 2f       	mov	r24, r28
 14e:	0e 94 6f 00 	call	0xde	; 0xde <SPI_Transmit>
	//SPI_Deselect();
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <main>:
int in_subpage = 0;


int main(void) {
	
	Init();
 158:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Init>
	USART_Init(UBBR);
 15c:	8f e1       	ldi	r24, 0x1F	; 31
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <USART_Init>
	Init_ADC();
 164:	0e 94 57 00 	call	0xae	; 0xae <Init_ADC>

	FILE *uart_stream = fdevopen(USART_Transmit_Char, USART_Receive_Char);
 168:	67 e0       	ldi	r22, 0x07	; 7
 16a:	71 e0       	ldi	r23, 0x01	; 1
 16c:	89 ef       	ldi	r24, 0xF9	; 249
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 0c 01 	call	0x218	; 0x218 <fdevopen>
	stdout = uart_stream;
 174:	e6 e0       	ldi	r30, 0x06	; 6
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	93 83       	std	Z+3, r25	; 0x03
 17a:	82 83       	std	Z+2, r24	; 0x02
	stdin = uart_stream;
 17c:	91 83       	std	Z+1, r25	; 0x01
 17e:	80 83       	st	Z, r24

	// Initialize MCP2515 (which also initializes SPI)
	SPI_Init();
 180:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_Init>
	MCP2515_Init();
 184:	0e 94 84 00 	call	0x108	; 0x108 <MCP2515_Init>
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	9f e5       	ldi	r25, 0x5F	; 95
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x34>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x3a>
 192:	00 00       	nop
		
	_delay_ms(20);
	while (1) 
	{
		MCP2515_Write(0x2A, 0x01);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	8a e2       	ldi	r24, 0x2A	; 42
 198:	0e 94 9c 00 	call	0x138	; 0x138 <MCP2515_Write>
 19c:	9f ef       	ldi	r25, 0xFF	; 255
 19e:	2f e7       	ldi	r18, 0x7F	; 127
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	91 50       	subi	r25, 0x01	; 1
 1a4:	20 40       	sbci	r18, 0x00	; 0
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0x4a>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x54>
 1ac:	00 00       	nop
		_delay_ms(500);
		MCP2515_Read(0x2A);
 1ae:	8a e2       	ldi	r24, 0x2A	; 42
 1b0:	0e 94 8f 00 	call	0x11e	; 0x11e <MCP2515_Read>
 1b4:	9f ef       	ldi	r25, 0xFF	; 255
 1b6:	2f e7       	ldi	r18, 0x7F	; 127
 1b8:	87 e0       	ldi	r24, 0x07	; 7
 1ba:	91 50       	subi	r25, 0x01	; 1
 1bc:	20 40       	sbci	r18, 0x00	; 0
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x62>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x6c>
 1c4:	00 00       	nop
 1c6:	e6 cf       	rjmp	.-52     	; 0x194 <main+0x3c>

000001c8 <Init>:
#include "Memory_driver.h"

/* === Function definition === */
void Init() {
/*Enable external memory interface*/
	MCUCR |= (1 << SRE);
 1c8:	85 b7       	in	r24, 0x35	; 53
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	85 bf       	out	0x35, r24	; 53
/*Disabled JTag pins on port C*/
	SFIOR |= (1 << XMM2);
 1ce:	80 b7       	in	r24, 0x30	; 48
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	80 bf       	out	0x30, r24	; 48
 1d4:	08 95       	ret

000001d6 <USART_Init>:
char USART_Receive(void)
{
/*Do nothing until data have been recieved and is ready to be read from UDR*/
	while (!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
 1d6:	90 bd       	out	0x20, r25	; 32
 1d8:	89 b9       	out	0x09, r24	; 9
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	8d 7f       	andi	r24, 0xFD	; 253
 1de:	8b b9       	out	0x0b, r24	; 11
 1e0:	88 e1       	ldi	r24, 0x18	; 24
 1e2:	8a b9       	out	0x0a, r24	; 10
 1e4:	86 e8       	ldi	r24, 0x86	; 134
 1e6:	80 bd       	out	0x20, r24	; 32
 1e8:	08 95       	ret

000001ea <USART_Transmit>:
 1ea:	5d 9b       	sbis	0x0b, 5	; 11
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <USART_Transmit>
 1ee:	8c b9       	out	0x0c, r24	; 12
 1f0:	08 95       	ret

000001f2 <USART_Transmit_Char>:

int USART_Transmit_Char(char c, FILE *stream)
{
 1f2:	cf 93       	push	r28
 1f4:	c8 2f       	mov	r28, r24
	if (c == '\n')
 1f6:	8a 30       	cpi	r24, 0x0A	; 10
 1f8:	19 f4       	brne	.+6      	; 0x200 <__EEPROM_REGION_LENGTH__>
	{
		USART_Transmit('\r');
 1fa:	8d e0       	ldi	r24, 0x0D	; 13
 1fc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
	}
	USART_Transmit(c);
 200:	8c 2f       	mov	r24, r28
 202:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
	return 0;
}
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <USART_Receive_Char>:

int USART_Receive_Char(FILE *stream)
{
/* Wait until data is received */
	while (!(UCSR0A & (1 << RXC0)));
 20e:	5f 9b       	sbis	0x0b, 7	; 11
 210:	fe cf       	rjmp	.-4      	; 0x20e <USART_Receive_Char>
	return UDR0;
 212:	8c b1       	in	r24, 0x0c	; 12
}
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	08 95       	ret

00000218 <fdevopen>:
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	00 97       	sbiw	r24, 0x00	; 0
 222:	31 f4       	brne	.+12     	; 0x230 <fdevopen+0x18>
 224:	61 15       	cp	r22, r1
 226:	71 05       	cpc	r23, r1
 228:	19 f4       	brne	.+6      	; 0x230 <fdevopen+0x18>
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	3a c0       	rjmp	.+116    	; 0x2a4 <fdevopen+0x8c>
 230:	8b 01       	movw	r16, r22
 232:	ec 01       	movw	r28, r24
 234:	6e e0       	ldi	r22, 0x0E	; 14
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 57 01 	call	0x2ae	; 0x2ae <calloc>
 240:	fc 01       	movw	r30, r24
 242:	89 2b       	or	r24, r25
 244:	91 f3       	breq	.-28     	; 0x22a <fdevopen+0x12>
 246:	80 e8       	ldi	r24, 0x80	; 128
 248:	83 83       	std	Z+3, r24	; 0x03
 24a:	01 15       	cp	r16, r1
 24c:	11 05       	cpc	r17, r1
 24e:	71 f0       	breq	.+28     	; 0x26c <fdevopen+0x54>
 250:	13 87       	std	Z+11, r17	; 0x0b
 252:	02 87       	std	Z+10, r16	; 0x0a
 254:	81 e8       	ldi	r24, 0x81	; 129
 256:	83 83       	std	Z+3, r24	; 0x03
 258:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 25c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 260:	89 2b       	or	r24, r25
 262:	21 f4       	brne	.+8      	; 0x26c <fdevopen+0x54>
 264:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 268:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 26c:	20 97       	sbiw	r28, 0x00	; 0
 26e:	c9 f0       	breq	.+50     	; 0x2a2 <fdevopen+0x8a>
 270:	d1 87       	std	Z+9, r29	; 0x09
 272:	c0 87       	std	Z+8, r28	; 0x08
 274:	83 81       	ldd	r24, Z+3	; 0x03
 276:	82 60       	ori	r24, 0x02	; 2
 278:	83 83       	std	Z+3, r24	; 0x03
 27a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 27e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 282:	89 2b       	or	r24, r25
 284:	71 f4       	brne	.+28     	; 0x2a2 <fdevopen+0x8a>
 286:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__data_end+0x3>
 28a:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__data_end+0x2>
 28e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x4>
 292:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x5>
 296:	89 2b       	or	r24, r25
 298:	21 f4       	brne	.+8      	; 0x2a2 <fdevopen+0x8a>
 29a:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__data_end+0x5>
 29e:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end+0x4>
 2a2:	cf 01       	movw	r24, r30
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	08 95       	ret

000002ae <calloc>:
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	86 9f       	mul	r24, r22
 2b8:	80 01       	movw	r16, r0
 2ba:	87 9f       	mul	r24, r23
 2bc:	10 0d       	add	r17, r0
 2be:	96 9f       	mul	r25, r22
 2c0:	10 0d       	add	r17, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	c8 01       	movw	r24, r16
 2c6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <malloc>
 2ca:	ec 01       	movw	r28, r24
 2cc:	00 97       	sbiw	r24, 0x00	; 0
 2ce:	29 f0       	breq	.+10     	; 0x2da <calloc+0x2c>
 2d0:	a8 01       	movw	r20, r16
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	0e 94 94 02 	call	0x528	; 0x528 <memset>
 2da:	ce 01       	movw	r24, r28
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <malloc>:
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	91 05       	cpc	r25, r1
 2f2:	10 f4       	brcc	.+4      	; 0x2f8 <malloc+0x12>
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__flp>
 2fc:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__flp+0x1>
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	a0 e0       	ldi	r26, 0x00	; 0
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	30 97       	sbiw	r30, 0x00	; 0
 30a:	19 f1       	breq	.+70     	; 0x352 <malloc+0x6c>
 30c:	40 81       	ld	r20, Z
 30e:	51 81       	ldd	r21, Z+1	; 0x01
 310:	02 81       	ldd	r16, Z+2	; 0x02
 312:	13 81       	ldd	r17, Z+3	; 0x03
 314:	48 17       	cp	r20, r24
 316:	59 07       	cpc	r21, r25
 318:	c8 f0       	brcs	.+50     	; 0x34c <malloc+0x66>
 31a:	84 17       	cp	r24, r20
 31c:	95 07       	cpc	r25, r21
 31e:	69 f4       	brne	.+26     	; 0x33a <malloc+0x54>
 320:	10 97       	sbiw	r26, 0x00	; 0
 322:	31 f0       	breq	.+12     	; 0x330 <malloc+0x4a>
 324:	12 96       	adiw	r26, 0x02	; 2
 326:	0c 93       	st	X, r16
 328:	12 97       	sbiw	r26, 0x02	; 2
 32a:	13 96       	adiw	r26, 0x03	; 3
 32c:	1c 93       	st	X, r17
 32e:	27 c0       	rjmp	.+78     	; 0x37e <malloc+0x98>
 330:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__flp>
 334:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <__flp+0x1>
 338:	22 c0       	rjmp	.+68     	; 0x37e <malloc+0x98>
 33a:	21 15       	cp	r18, r1
 33c:	31 05       	cpc	r19, r1
 33e:	19 f0       	breq	.+6      	; 0x346 <malloc+0x60>
 340:	42 17       	cp	r20, r18
 342:	53 07       	cpc	r21, r19
 344:	18 f4       	brcc	.+6      	; 0x34c <malloc+0x66>
 346:	9a 01       	movw	r18, r20
 348:	bd 01       	movw	r22, r26
 34a:	ef 01       	movw	r28, r30
 34c:	df 01       	movw	r26, r30
 34e:	f8 01       	movw	r30, r16
 350:	db cf       	rjmp	.-74     	; 0x308 <malloc+0x22>
 352:	21 15       	cp	r18, r1
 354:	31 05       	cpc	r19, r1
 356:	f9 f0       	breq	.+62     	; 0x396 <malloc+0xb0>
 358:	28 1b       	sub	r18, r24
 35a:	39 0b       	sbc	r19, r25
 35c:	24 30       	cpi	r18, 0x04	; 4
 35e:	31 05       	cpc	r19, r1
 360:	80 f4       	brcc	.+32     	; 0x382 <malloc+0x9c>
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	9b 81       	ldd	r25, Y+3	; 0x03
 366:	61 15       	cp	r22, r1
 368:	71 05       	cpc	r23, r1
 36a:	21 f0       	breq	.+8      	; 0x374 <malloc+0x8e>
 36c:	fb 01       	movw	r30, r22
 36e:	93 83       	std	Z+3, r25	; 0x03
 370:	82 83       	std	Z+2, r24	; 0x02
 372:	04 c0       	rjmp	.+8      	; 0x37c <malloc+0x96>
 374:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__flp+0x1>
 378:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__flp>
 37c:	fe 01       	movw	r30, r28
 37e:	32 96       	adiw	r30, 0x02	; 2
 380:	44 c0       	rjmp	.+136    	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 382:	fe 01       	movw	r30, r28
 384:	e2 0f       	add	r30, r18
 386:	f3 1f       	adc	r31, r19
 388:	81 93       	st	Z+, r24
 38a:	91 93       	st	Z+, r25
 38c:	22 50       	subi	r18, 0x02	; 2
 38e:	31 09       	sbc	r19, r1
 390:	39 83       	std	Y+1, r19	; 0x01
 392:	28 83       	st	Y, r18
 394:	3a c0       	rjmp	.+116    	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 396:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 39a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 39e:	23 2b       	or	r18, r19
 3a0:	41 f4       	brne	.+16     	; 0x3b2 <malloc+0xcc>
 3a2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 3a6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 3aa:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__brkval+0x1>
 3ae:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__brkval>
 3b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ba:	21 15       	cp	r18, r1
 3bc:	31 05       	cpc	r19, r1
 3be:	41 f4       	brne	.+16     	; 0x3d0 <malloc+0xea>
 3c0:	2d b7       	in	r18, 0x3d	; 61
 3c2:	3e b7       	in	r19, 0x3e	; 62
 3c4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 3c8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 3cc:	24 1b       	sub	r18, r20
 3ce:	35 0b       	sbc	r19, r21
 3d0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__brkval>
 3d4:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__brkval+0x1>
 3d8:	e2 17       	cp	r30, r18
 3da:	f3 07       	cpc	r31, r19
 3dc:	a0 f4       	brcc	.+40     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3de:	2e 1b       	sub	r18, r30
 3e0:	3f 0b       	sbc	r19, r31
 3e2:	28 17       	cp	r18, r24
 3e4:	39 07       	cpc	r19, r25
 3e6:	78 f0       	brcs	.+30     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3e8:	ac 01       	movw	r20, r24
 3ea:	4e 5f       	subi	r20, 0xFE	; 254
 3ec:	5f 4f       	sbci	r21, 0xFF	; 255
 3ee:	24 17       	cp	r18, r20
 3f0:	35 07       	cpc	r19, r21
 3f2:	48 f0       	brcs	.+18     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3f4:	4e 0f       	add	r20, r30
 3f6:	5f 1f       	adc	r21, r31
 3f8:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <__brkval+0x1>
 3fc:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <__brkval>
 400:	81 93       	st	Z+, r24
 402:	91 93       	st	Z+, r25
 404:	02 c0       	rjmp	.+4      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 406:	e0 e0       	ldi	r30, 0x00	; 0
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	cf 01       	movw	r24, r30
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <free>:
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	00 97       	sbiw	r24, 0x00	; 0
 41c:	09 f4       	brne	.+2      	; 0x420 <free+0xa>
 41e:	81 c0       	rjmp	.+258    	; 0x522 <__stack+0x23>
 420:	fc 01       	movw	r30, r24
 422:	32 97       	sbiw	r30, 0x02	; 2
 424:	13 82       	std	Z+3, r1	; 0x03
 426:	12 82       	std	Z+2, r1	; 0x02
 428:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__flp>
 42c:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__flp+0x1>
 430:	10 97       	sbiw	r26, 0x00	; 0
 432:	81 f4       	brne	.+32     	; 0x454 <free+0x3e>
 434:	20 81       	ld	r18, Z
 436:	31 81       	ldd	r19, Z+1	; 0x01
 438:	82 0f       	add	r24, r18
 43a:	93 1f       	adc	r25, r19
 43c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 440:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 444:	28 17       	cp	r18, r24
 446:	39 07       	cpc	r19, r25
 448:	51 f5       	brne	.+84     	; 0x49e <free+0x88>
 44a:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__brkval+0x1>
 44e:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__brkval>
 452:	67 c0       	rjmp	.+206    	; 0x522 <__stack+0x23>
 454:	ed 01       	movw	r28, r26
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	ce 17       	cp	r28, r30
 45c:	df 07       	cpc	r29, r31
 45e:	40 f4       	brcc	.+16     	; 0x470 <free+0x5a>
 460:	4a 81       	ldd	r20, Y+2	; 0x02
 462:	5b 81       	ldd	r21, Y+3	; 0x03
 464:	9e 01       	movw	r18, r28
 466:	41 15       	cp	r20, r1
 468:	51 05       	cpc	r21, r1
 46a:	f1 f0       	breq	.+60     	; 0x4a8 <free+0x92>
 46c:	ea 01       	movw	r28, r20
 46e:	f5 cf       	rjmp	.-22     	; 0x45a <free+0x44>
 470:	d3 83       	std	Z+3, r29	; 0x03
 472:	c2 83       	std	Z+2, r28	; 0x02
 474:	40 81       	ld	r20, Z
 476:	51 81       	ldd	r21, Z+1	; 0x01
 478:	84 0f       	add	r24, r20
 47a:	95 1f       	adc	r25, r21
 47c:	c8 17       	cp	r28, r24
 47e:	d9 07       	cpc	r29, r25
 480:	59 f4       	brne	.+22     	; 0x498 <free+0x82>
 482:	88 81       	ld	r24, Y
 484:	99 81       	ldd	r25, Y+1	; 0x01
 486:	84 0f       	add	r24, r20
 488:	95 1f       	adc	r25, r21
 48a:	02 96       	adiw	r24, 0x02	; 2
 48c:	91 83       	std	Z+1, r25	; 0x01
 48e:	80 83       	st	Z, r24
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	9b 81       	ldd	r25, Y+3	; 0x03
 494:	93 83       	std	Z+3, r25	; 0x03
 496:	82 83       	std	Z+2, r24	; 0x02
 498:	21 15       	cp	r18, r1
 49a:	31 05       	cpc	r19, r1
 49c:	29 f4       	brne	.+10     	; 0x4a8 <free+0x92>
 49e:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__flp+0x1>
 4a2:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__flp>
 4a6:	3d c0       	rjmp	.+122    	; 0x522 <__stack+0x23>
 4a8:	e9 01       	movw	r28, r18
 4aa:	fb 83       	std	Y+3, r31	; 0x03
 4ac:	ea 83       	std	Y+2, r30	; 0x02
 4ae:	49 91       	ld	r20, Y+
 4b0:	59 91       	ld	r21, Y+
 4b2:	c4 0f       	add	r28, r20
 4b4:	d5 1f       	adc	r29, r21
 4b6:	ec 17       	cp	r30, r28
 4b8:	fd 07       	cpc	r31, r29
 4ba:	61 f4       	brne	.+24     	; 0x4d4 <free+0xbe>
 4bc:	80 81       	ld	r24, Z
 4be:	91 81       	ldd	r25, Z+1	; 0x01
 4c0:	84 0f       	add	r24, r20
 4c2:	95 1f       	adc	r25, r21
 4c4:	02 96       	adiw	r24, 0x02	; 2
 4c6:	e9 01       	movw	r28, r18
 4c8:	99 83       	std	Y+1, r25	; 0x01
 4ca:	88 83       	st	Y, r24
 4cc:	82 81       	ldd	r24, Z+2	; 0x02
 4ce:	93 81       	ldd	r25, Z+3	; 0x03
 4d0:	9b 83       	std	Y+3, r25	; 0x03
 4d2:	8a 83       	std	Y+2, r24	; 0x02
 4d4:	e0 e0       	ldi	r30, 0x00	; 0
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	12 96       	adiw	r26, 0x02	; 2
 4da:	8d 91       	ld	r24, X+
 4dc:	9c 91       	ld	r25, X
 4de:	13 97       	sbiw	r26, 0x03	; 3
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	19 f0       	breq	.+6      	; 0x4ea <free+0xd4>
 4e4:	fd 01       	movw	r30, r26
 4e6:	dc 01       	movw	r26, r24
 4e8:	f7 cf       	rjmp	.-18     	; 0x4d8 <free+0xc2>
 4ea:	8d 91       	ld	r24, X+
 4ec:	9c 91       	ld	r25, X
 4ee:	11 97       	sbiw	r26, 0x01	; 1
 4f0:	9d 01       	movw	r18, r26
 4f2:	2e 5f       	subi	r18, 0xFE	; 254
 4f4:	3f 4f       	sbci	r19, 0xFF	; 255
 4f6:	82 0f       	add	r24, r18
 4f8:	93 1f       	adc	r25, r19
 4fa:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 4fe:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 502:	28 17       	cp	r18, r24
 504:	39 07       	cpc	r19, r25
 506:	69 f4       	brne	.+26     	; 0x522 <__stack+0x23>
 508:	30 97       	sbiw	r30, 0x00	; 0
 50a:	29 f4       	brne	.+10     	; 0x516 <__stack+0x17>
 50c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__flp+0x1>
 510:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__flp>
 514:	02 c0       	rjmp	.+4      	; 0x51a <__stack+0x1b>
 516:	13 82       	std	Z+3, r1	; 0x03
 518:	12 82       	std	Z+2, r1	; 0x02
 51a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__brkval+0x1>
 51e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__brkval>
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret

00000528 <memset>:
 528:	dc 01       	movw	r26, r24
 52a:	01 c0       	rjmp	.+2      	; 0x52e <memset+0x6>
 52c:	6d 93       	st	X+, r22
 52e:	41 50       	subi	r20, 0x01	; 1
 530:	50 40       	sbci	r21, 0x00	; 0
 532:	e0 f7       	brcc	.-8      	; 0x52c <memset+0x4>
 534:	08 95       	ret

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>
