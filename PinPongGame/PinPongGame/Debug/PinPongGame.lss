
PinPongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000258  00800100  00001068  000010fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001068  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800358  00800358  00001354  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017a8  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7d  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aed  00000000  00000000  00003909  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  000043f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066f  00000000  00000000  000046cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cf5  00000000  00000000  00004d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005a30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	13 e0       	ldi	r17, 0x03	; 3
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 e6       	ldi	r30, 0x68	; 104
      84:	f0 e1       	ldi	r31, 0x10	; 16
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a8 35       	cpi	r26, 0x58	; 88
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	23 e0       	ldi	r18, 0x03	; 3
      94:	a8 e5       	ldi	r26, 0x58	; 88
      96:	b3 e0       	ldi	r27, 0x03	; 3
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a2 36       	cpi	r26, 0x62	; 98
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 4f 02 	call	0x49e	; 0x49e <main>
      a6:	0c 94 32 08 	jmp	0x1064	; 0x1064 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Read>:

uint8_t ADC_Read(uint8_t channel) 
{
/*Single-ended unipolar and channel specified ADC mode*/
	uint8_t setup = (1 << 7) | channel;
	XMEM_Write(setup, ADC_BASE_ADDRESS);
      ae:	60 e0       	ldi	r22, 0x00	; 0
      b0:	74 e1       	ldi	r23, 0x14	; 20
      b2:	80 68       	ori	r24, 0x80	; 128
      b4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <XMEM_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b8:	89 e9       	ldi	r24, 0x99	; 153
      ba:	99 e0       	ldi	r25, 0x09	; 9
      bc:	01 97       	sbiw	r24, 0x01	; 1
      be:	f1 f7       	brne	.-4      	; 0xbc <ADC_Read+0xe>
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <ADC_Read+0x14>
	_delay_ms(2);
	return XMEM_Read(ADC_BASE_ADDRESS);
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	94 e1       	ldi	r25, 0x14	; 20
      c6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <XMEM_Read>
}
      ca:	08 95       	ret

000000cc <Calibrate_Joystick>:

JoystickCalibration Calibrate_Joystick(void)
{
      cc:	4f 92       	push	r4
      ce:	5f 92       	push	r5
      d0:	6f 92       	push	r6
      d2:	7f 92       	push	r7
      d4:	8f 92       	push	r8
      d6:	9f 92       	push	r9
      d8:	af 92       	push	r10
      da:	bf 92       	push	r11
      dc:	cf 92       	push	r12
      de:	df 92       	push	r13
      e0:	ef 92       	push	r14
      e2:	ff 92       	push	r15
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	4c 01       	movw	r8, r24
	JoystickCalibration calibration;
	int32_t x_sum = 0, y_sum = 0;
	uint16_t x_min = 255, x_max = 0, y_min = 255, y_max = 0;
	const uint16_t num_samples = 500;

	printf("Step 1: Setting neutral position: Do not move the joystick.\n");
      ee:	86 e0       	ldi	r24, 0x06	; 6
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <puts>
      f6:	2f ef       	ldi	r18, 0xFF	; 255
      f8:	8f ef       	ldi	r24, 0xFF	; 255
      fa:	9e e0       	ldi	r25, 0x0E	; 14
      fc:	21 50       	subi	r18, 0x01	; 1
      fe:	80 40       	sbci	r24, 0x00	; 0
     100:	90 40       	sbci	r25, 0x00	; 0
     102:	e1 f7       	brne	.-8      	; 0xfc <Calibrate_Joystick+0x30>
     104:	00 c0       	rjmp	.+0      	; 0x106 <Calibrate_Joystick+0x3a>
     106:	00 00       	nop
	_delay_ms(1000);

	for (uint16_t i = 0; i < num_samples; i++)
     108:	c0 e0       	ldi	r28, 0x00	; 0
     10a:	d0 e0       	ldi	r29, 0x00	; 0
}

JoystickCalibration Calibrate_Joystick(void)
{
	JoystickCalibration calibration;
	int32_t x_sum = 0, y_sum = 0;
     10c:	c1 2c       	mov	r12, r1
     10e:	d1 2c       	mov	r13, r1
     110:	76 01       	movw	r14, r12
     112:	41 2c       	mov	r4, r1
     114:	51 2c       	mov	r5, r1
     116:	32 01       	movw	r6, r4
	const uint16_t num_samples = 500;

	printf("Step 1: Setting neutral position: Do not move the joystick.\n");
	_delay_ms(1000);

	for (uint16_t i = 0; i < num_samples; i++)
     118:	15 c0       	rjmp	.+42     	; 0x144 <Calibrate_Joystick+0x78>
	{
		uint8_t adc_x = ADC_Read(ADC_CHANNEL_X);
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
     120:	18 2f       	mov	r17, r24
		uint8_t adc_y = ADC_Read(ADC_CHANNEL_Y);
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>

		x_sum += adc_x;
     128:	41 0e       	add	r4, r17
     12a:	51 1c       	adc	r5, r1
     12c:	61 1c       	adc	r6, r1
     12e:	71 1c       	adc	r7, r1
		y_sum += adc_y;
     130:	c8 0e       	add	r12, r24
     132:	d1 1c       	adc	r13, r1
     134:	e1 1c       	adc	r14, r1
     136:	f1 1c       	adc	r15, r1
     138:	e9 e9       	ldi	r30, 0x99	; 153
     13a:	f9 e0       	ldi	r31, 0x09	; 9
     13c:	31 97       	sbiw	r30, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <Calibrate_Joystick+0x70>
     140:	00 c0       	rjmp	.+0      	; 0x142 <Calibrate_Joystick+0x76>
	const uint16_t num_samples = 500;

	printf("Step 1: Setting neutral position: Do not move the joystick.\n");
	_delay_ms(1000);

	for (uint16_t i = 0; i < num_samples; i++)
     142:	21 96       	adiw	r28, 0x01	; 1
     144:	c4 3f       	cpi	r28, 0xF4	; 244
     146:	f1 e0       	ldi	r31, 0x01	; 1
     148:	df 07       	cpc	r29, r31
     14a:	38 f3       	brcs	.-50     	; 0x11a <Calibrate_Joystick+0x4e>
		y_sum += adc_y;

		_delay_ms(2);
	}

	calibration.x_offset = (int16_t)(x_sum / num_samples);
     14c:	c3 01       	movw	r24, r6
     14e:	b2 01       	movw	r22, r4
     150:	24 ef       	ldi	r18, 0xF4	; 244
     152:	31 e0       	ldi	r19, 0x01	; 1
     154:	40 e0       	ldi	r20, 0x00	; 0
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	0e 94 31 03 	call	0x662	; 0x662 <__divmodsi4>
     15c:	c2 2f       	mov	r28, r18
     15e:	d3 2f       	mov	r29, r19
     160:	f4 01       	movw	r30, r8
     162:	20 83       	st	Z, r18
     164:	31 83       	std	Z+1, r19	; 0x01
	calibration.y_offset = (int16_t)(y_sum / num_samples);
     166:	c7 01       	movw	r24, r14
     168:	b6 01       	movw	r22, r12
     16a:	24 ef       	ldi	r18, 0xF4	; 244
     16c:	31 e0       	ldi	r19, 0x01	; 1
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	50 e0       	ldi	r21, 0x00	; 0
     172:	0e 94 31 03 	call	0x662	; 0x662 <__divmodsi4>
     176:	f4 01       	movw	r30, r8
     178:	22 83       	std	Z+2, r18	; 0x02
     17a:	33 83       	std	Z+3, r19	; 0x03

	printf("Neutral position set!: x_offset = %d, y_offset = %d\n", calibration.x_offset, calibration.y_offset);
     17c:	3f 93       	push	r19
     17e:	2f 93       	push	r18
     180:	df 93       	push	r29
     182:	cf 93       	push	r28
     184:	82 e4       	ldi	r24, 0x42	; 66
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	9f 93       	push	r25
     18a:	8f 93       	push	r24
     18c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>

	printf("Step 2: Calibration x axis: Move joystick in max left.\n");
     190:	87 e7       	ldi	r24, 0x77	; 119
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	0e 94 f6 03 	call	0x7ec	; 0x7ec <puts>
     198:	ff ef       	ldi	r31, 0xFF	; 255
     19a:	2f ef       	ldi	r18, 0xFF	; 255
     19c:	8e e0       	ldi	r24, 0x0E	; 14
     19e:	f1 50       	subi	r31, 0x01	; 1
     1a0:	20 40       	sbci	r18, 0x00	; 0
     1a2:	80 40       	sbci	r24, 0x00	; 0
     1a4:	e1 f7       	brne	.-8      	; 0x19e <Calibrate_Joystick+0xd2>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <Calibrate_Joystick+0xdc>
     1a8:	00 00       	nop
	_delay_ms(1000);

	for (uint16_t i = 0; i < num_samples; i++)
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	c0 e0       	ldi	r28, 0x00	; 0
     1b8:	d0 e0       	ldi	r29, 0x00	; 0

JoystickCalibration Calibrate_Joystick(void)
{
	JoystickCalibration calibration;
	int32_t x_sum = 0, y_sum = 0;
	uint16_t x_min = 255, x_max = 0, y_min = 255, y_max = 0;
     1ba:	aa 24       	eor	r10, r10
     1bc:	aa 94       	dec	r10
     1be:	b1 2c       	mov	r11, r1
	printf("Neutral position set!: x_offset = %d, y_offset = %d\n", calibration.x_offset, calibration.y_offset);

	printf("Step 2: Calibration x axis: Move joystick in max left.\n");
	_delay_ms(1000);

	for (uint16_t i = 0; i < num_samples; i++)
     1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <Calibrate_Joystick+0x108>
	{
		uint8_t adc_x = ADC_Read(ADC_CHANNEL_X);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
		if (adc_x < x_min) x_min = adc_x;
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	8a 15       	cp	r24, r10
     1cc:	9b 05       	cpc	r25, r11
     1ce:	08 f4       	brcc	.+2      	; 0x1d2 <Calibrate_Joystick+0x106>
     1d0:	5c 01       	movw	r10, r24
	printf("Neutral position set!: x_offset = %d, y_offset = %d\n", calibration.x_offset, calibration.y_offset);

	printf("Step 2: Calibration x axis: Move joystick in max left.\n");
	_delay_ms(1000);

	for (uint16_t i = 0; i < num_samples; i++)
     1d2:	21 96       	adiw	r28, 0x01	; 1
     1d4:	c4 3f       	cpi	r28, 0xF4	; 244
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	d9 07       	cpc	r29, r25
     1da:	98 f3       	brcs	.-26     	; 0x1c2 <Calibrate_Joystick+0xf6>
	{
		uint8_t adc_x = ADC_Read(ADC_CHANNEL_X);
		if (adc_x < x_min) x_min = adc_x;
	}
	
	printf("Step 3: Calibration x axis: Move joystick in max right.\n");
     1dc:	8e ea       	ldi	r24, 0xAE	; 174
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <puts>
     1e4:	ef ef       	ldi	r30, 0xFF	; 255
     1e6:	ff ef       	ldi	r31, 0xFF	; 255
     1e8:	2d e1       	ldi	r18, 0x1D	; 29
     1ea:	e1 50       	subi	r30, 0x01	; 1
     1ec:	f0 40       	sbci	r31, 0x00	; 0
     1ee:	20 40       	sbci	r18, 0x00	; 0
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <Calibrate_Joystick+0x11e>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <Calibrate_Joystick+0x128>
     1f4:	00 00       	nop
	_delay_ms(2000);

	for (uint16_t i = 0; i < num_samples; i++)
     1f6:	c0 e0       	ldi	r28, 0x00	; 0
     1f8:	d0 e0       	ldi	r29, 0x00	; 0

JoystickCalibration Calibrate_Joystick(void)
{
	JoystickCalibration calibration;
	int32_t x_sum = 0, y_sum = 0;
	uint16_t x_min = 255, x_max = 0, y_min = 255, y_max = 0;
     1fa:	c1 2c       	mov	r12, r1
     1fc:	d1 2c       	mov	r13, r1
	}
	
	printf("Step 3: Calibration x axis: Move joystick in max right.\n");
	_delay_ms(2000);

	for (uint16_t i = 0; i < num_samples; i++)
     1fe:	09 c0       	rjmp	.+18     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
	{
		uint8_t adc_x = ADC_Read(ADC_CHANNEL_X);
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
		if (adc_x > x_max) x_max = adc_x;
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	c8 16       	cp	r12, r24
     20a:	d9 06       	cpc	r13, r25
     20c:	08 f4       	brcc	.+2      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
     20e:	6c 01       	movw	r12, r24
	}
	
	printf("Step 3: Calibration x axis: Move joystick in max right.\n");
	_delay_ms(2000);

	for (uint16_t i = 0; i < num_samples; i++)
     210:	21 96       	adiw	r28, 0x01	; 1
     212:	c4 3f       	cpi	r28, 0xF4	; 244
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	d8 07       	cpc	r29, r24
     218:	98 f3       	brcs	.-26     	; 0x200 <__EEPROM_REGION_LENGTH__>
	{
		uint8_t adc_x = ADC_Read(ADC_CHANNEL_X);
		if (adc_x > x_max) x_max = adc_x;
	}

	printf("Values X: x_min = %d, x_max = %d\n", x_min, x_max);
     21a:	df 92       	push	r13
     21c:	cf 92       	push	r12
     21e:	bf 92       	push	r11
     220:	af 92       	push	r10
     222:	86 ee       	ldi	r24, 0xE6	; 230
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>

	printf("Step 4: Calibration y axis: Move joystick in max up.\n");
     22e:	88 e0       	ldi	r24, 0x08	; 8
     230:	92 e0       	ldi	r25, 0x02	; 2
     232:	0e 94 f6 03 	call	0x7ec	; 0x7ec <puts>
     236:	9f ef       	ldi	r25, 0xFF	; 255
     238:	ef ef       	ldi	r30, 0xFF	; 255
     23a:	fe e0       	ldi	r31, 0x0E	; 14
     23c:	91 50       	subi	r25, 0x01	; 1
     23e:	e0 40       	sbci	r30, 0x00	; 0
     240:	f0 40       	sbci	r31, 0x00	; 0
     242:	e1 f7       	brne	.-8      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
     244:	00 c0       	rjmp	.+0      	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
     246:	00 00       	nop
	_delay_ms(1000);
	for (uint16_t i = 0; i < num_samples; i++)
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	c0 e0       	ldi	r28, 0x00	; 0
     256:	d0 e0       	ldi	r29, 0x00	; 0

JoystickCalibration Calibrate_Joystick(void)
{
	JoystickCalibration calibration;
	int32_t x_sum = 0, y_sum = 0;
	uint16_t x_min = 255, x_max = 0, y_min = 255, y_max = 0;
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	10 e0       	ldi	r17, 0x00	; 0

	printf("Values X: x_min = %d, x_max = %d\n", x_min, x_max);

	printf("Step 4: Calibration y axis: Move joystick in max up.\n");
	_delay_ms(1000);
	for (uint16_t i = 0; i < num_samples; i++)
     25c:	09 c0       	rjmp	.+18     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
	{
		uint8_t adc_y = ADC_Read(ADC_CHANNEL_Y);
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
		if (adc_y > y_max) y_max = adc_y;
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	08 17       	cp	r16, r24
     268:	19 07       	cpc	r17, r25
     26a:	08 f4       	brcc	.+2      	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
     26c:	8c 01       	movw	r16, r24

	printf("Values X: x_min = %d, x_max = %d\n", x_min, x_max);

	printf("Step 4: Calibration y axis: Move joystick in max up.\n");
	_delay_ms(1000);
	for (uint16_t i = 0; i < num_samples; i++)
     26e:	21 96       	adiw	r28, 0x01	; 1
     270:	c4 3f       	cpi	r28, 0xF4	; 244
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	d2 07       	cpc	r29, r18
     276:	98 f3       	brcs	.-26     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
	{
		uint8_t adc_y = ADC_Read(ADC_CHANNEL_Y);
		if (adc_y > y_max) y_max = adc_y;
	}

	printf("Step 5: Calibration y axis: Move joystick in max down.\n");
     278:	8d e3       	ldi	r24, 0x3D	; 61
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <puts>
     280:	8f ef       	ldi	r24, 0xFF	; 255
     282:	9f ef       	ldi	r25, 0xFF	; 255
     284:	ee e0       	ldi	r30, 0x0E	; 14
     286:	81 50       	subi	r24, 0x01	; 1
     288:	90 40       	sbci	r25, 0x00	; 0
     28a:	e0 40       	sbci	r30, 0x00	; 0
     28c:	e1 f7       	brne	.-8      	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
     290:	00 00       	nop
	_delay_ms(1000);
	for (uint16_t i = 0; i < num_samples; i++)
     292:	c0 e0       	ldi	r28, 0x00	; 0
     294:	d0 e0       	ldi	r29, 0x00	; 0

JoystickCalibration Calibrate_Joystick(void)
{
	JoystickCalibration calibration;
	int32_t x_sum = 0, y_sum = 0;
	uint16_t x_min = 255, x_max = 0, y_min = 255, y_max = 0;
     296:	ee 24       	eor	r14, r14
     298:	ea 94       	dec	r14
     29a:	f1 2c       	mov	r15, r1
		if (adc_y > y_max) y_max = adc_y;
	}

	printf("Step 5: Calibration y axis: Move joystick in max down.\n");
	_delay_ms(1000);
	for (uint16_t i = 0; i < num_samples; i++)
     29c:	09 c0       	rjmp	.+18     	; 0x2b0 <__EEPROM_REGION_LENGTH__+0xb0>
	{
		uint8_t adc_y = ADC_Read(ADC_CHANNEL_Y);
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
		if (adc_y < y_min) y_min = adc_y;
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	8e 15       	cp	r24, r14
     2a8:	9f 05       	cpc	r25, r15
     2aa:	08 f4       	brcc	.+2      	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
     2ac:	7c 01       	movw	r14, r24
		if (adc_y > y_max) y_max = adc_y;
	}

	printf("Step 5: Calibration y axis: Move joystick in max down.\n");
	_delay_ms(1000);
	for (uint16_t i = 0; i < num_samples; i++)
     2ae:	21 96       	adiw	r28, 0x01	; 1
     2b0:	c4 3f       	cpi	r28, 0xF4	; 244
     2b2:	f1 e0       	ldi	r31, 0x01	; 1
     2b4:	df 07       	cpc	r29, r31
     2b6:	98 f3       	brcs	.-26     	; 0x29e <__EEPROM_REGION_LENGTH__+0x9e>
	{
		uint8_t adc_y = ADC_Read(ADC_CHANNEL_Y);
		if (adc_y < y_min) y_min = adc_y;
	}

	printf("Values Y: y_min = %d, y_max = %d\n", y_min, y_max);
     2b8:	1f 93       	push	r17
     2ba:	0f 93       	push	r16
     2bc:	ff 92       	push	r15
     2be:	ef 92       	push	r14
     2c0:	84 e7       	ldi	r24, 0x74	; 116
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	9f 93       	push	r25
     2c6:	8f 93       	push	r24
     2c8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>
     2cc:	2f ef       	ldi	r18, 0xFF	; 255
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	9b e0       	ldi	r25, 0x0B	; 11
     2d2:	21 50       	subi	r18, 0x01	; 1
     2d4:	80 40       	sbci	r24, 0x00	; 0
     2d6:	90 40       	sbci	r25, 0x00	; 0
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <__EEPROM_REGION_LENGTH__+0xd2>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <__EEPROM_REGION_LENGTH__+0xdc>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
	_delay_ms(800);
	calibration.x_min = x_min;
     2de:	f4 01       	movw	r30, r8
     2e0:	b1 86       	std	Z+9, r11	; 0x09
     2e2:	a0 86       	std	Z+8, r10	; 0x08
	calibration.x_max = x_max;
     2e4:	d5 82       	std	Z+5, r13	; 0x05
     2e6:	c4 82       	std	Z+4, r12	; 0x04
	calibration.y_min = y_min;
     2e8:	f3 86       	std	Z+11, r15	; 0x0b
     2ea:	e2 86       	std	Z+10, r14	; 0x0a
	calibration.y_max = y_max;
     2ec:	17 83       	std	Z+7, r17	; 0x07
     2ee:	06 83       	std	Z+6, r16	; 0x06

	printf("Calibration ended!\n");
     2f0:	86 e9       	ldi	r24, 0x96	; 150
     2f2:	92 e0       	ldi	r25, 0x02	; 2
     2f4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <puts>
	
	return calibration;
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
}
     304:	c4 01       	movw	r24, r8
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	bf 90       	pop	r11
     318:	af 90       	pop	r10
     31a:	9f 90       	pop	r9
     31c:	8f 90       	pop	r8
     31e:	7f 90       	pop	r7
     320:	6f 90       	pop	r6
     322:	5f 90       	pop	r5
     324:	4f 90       	pop	r4
     326:	08 95       	ret

00000328 <Get_Joystick_Position>:


JoystickPosition Get_Joystick_Position(JoystickCalibration calibration)
{
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	2c 97       	sbiw	r28, 0x0c	; 12
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	e9 82       	std	Y+1, r14	; 0x01
     346:	fa 82       	std	Y+2, r15	; 0x02
     348:	0b 83       	std	Y+3, r16	; 0x03
     34a:	1c 83       	std	Y+4, r17	; 0x04
     34c:	2d 83       	std	Y+5, r18	; 0x05
     34e:	3e 83       	std	Y+6, r19	; 0x06
     350:	4f 83       	std	Y+7, r20	; 0x07
     352:	58 87       	std	Y+8, r21	; 0x08
     354:	69 87       	std	Y+9, r22	; 0x09
     356:	7a 87       	std	Y+10, r23	; 0x0a
     358:	8b 87       	std	Y+11, r24	; 0x0b
     35a:	9c 87       	std	Y+12, r25	; 0x0c
	JoystickPosition pos;
	
	int16_t adc_x = (int16_t)ADC_Read(ADC_CHANNEL_X);
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
     362:	08 2f       	mov	r16, r24
     364:	10 e0       	ldi	r17, 0x00	; 0
	int16_t adc_y = (int16_t)ADC_Read(ADC_CHANNEL_Y);
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
     36c:	e8 2f       	mov	r30, r24
     36e:	f0 e0       	ldi	r31, 0x00	; 0
	
	int16_t adc_x_calibrated = adc_x - calibration.x_offset;
     370:	49 81       	ldd	r20, Y+1	; 0x01
     372:	5a 81       	ldd	r21, Y+2	; 0x02
     374:	98 01       	movw	r18, r16
     376:	24 1b       	sub	r18, r20
     378:	35 0b       	sbc	r19, r21
	int16_t adc_y_calibrated = adc_y - calibration.y_offset;
     37a:	0b 81       	ldd	r16, Y+3	; 0x03
     37c:	1c 81       	ldd	r17, Y+4	; 0x04
     37e:	e0 1b       	sub	r30, r16
     380:	f1 0b       	sbc	r31, r17
	
	if (adc_x_calibrated > 0)
     382:	12 16       	cp	r1, r18
     384:	13 06       	cpc	r1, r19
     386:	74 f4       	brge	.+28     	; 0x3a4 <Get_Joystick_Position+0x7c>
	{
		pos.x = (adc_x_calibrated * 100) / (calibration.x_max - calibration.x_offset);
     388:	64 e6       	ldi	r22, 0x64	; 100
     38a:	62 9f       	mul	r22, r18
     38c:	c0 01       	movw	r24, r0
     38e:	63 9f       	mul	r22, r19
     390:	90 0d       	add	r25, r0
     392:	11 24       	eor	r1, r1
     394:	6d 81       	ldd	r22, Y+5	; 0x05
     396:	7e 81       	ldd	r23, Y+6	; 0x06
     398:	64 1b       	sub	r22, r20
     39a:	75 0b       	sbc	r23, r21
     39c:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodhi4>
     3a0:	26 2f       	mov	r18, r22
     3a2:	0e c0       	rjmp	.+28     	; 0x3c0 <Get_Joystick_Position+0x98>
	}
	else
	{
		pos.x = (adc_x_calibrated * 100) / (calibration.x_offset - calibration.x_min);
     3a4:	64 e6       	ldi	r22, 0x64	; 100
     3a6:	62 9f       	mul	r22, r18
     3a8:	c0 01       	movw	r24, r0
     3aa:	63 9f       	mul	r22, r19
     3ac:	90 0d       	add	r25, r0
     3ae:	11 24       	eor	r1, r1
     3b0:	29 85       	ldd	r18, Y+9	; 0x09
     3b2:	3a 85       	ldd	r19, Y+10	; 0x0a
     3b4:	ba 01       	movw	r22, r20
     3b6:	62 1b       	sub	r22, r18
     3b8:	73 0b       	sbc	r23, r19
     3ba:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodhi4>
     3be:	26 2f       	mov	r18, r22
	}

	if (adc_y_calibrated > 0)
     3c0:	1e 16       	cp	r1, r30
     3c2:	1f 06       	cpc	r1, r31
     3c4:	74 f4       	brge	.+28     	; 0x3e2 <Get_Joystick_Position+0xba>
	{
		pos.y = (adc_y_calibrated * 100) / (calibration.y_max - calibration.y_offset);
     3c6:	34 e6       	ldi	r19, 0x64	; 100
     3c8:	3e 9f       	mul	r19, r30
     3ca:	c0 01       	movw	r24, r0
     3cc:	3f 9f       	mul	r19, r31
     3ce:	90 0d       	add	r25, r0
     3d0:	11 24       	eor	r1, r1
     3d2:	6f 81       	ldd	r22, Y+7	; 0x07
     3d4:	78 85       	ldd	r23, Y+8	; 0x08
     3d6:	60 1b       	sub	r22, r16
     3d8:	71 0b       	sbc	r23, r17
     3da:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodhi4>
     3de:	96 2f       	mov	r25, r22
     3e0:	0e c0       	rjmp	.+28     	; 0x3fe <Get_Joystick_Position+0xd6>
	}
	else
	{
		pos.y = (adc_y_calibrated * 100) / (calibration.y_offset - calibration.y_min);
     3e2:	34 e6       	ldi	r19, 0x64	; 100
     3e4:	3e 9f       	mul	r19, r30
     3e6:	c0 01       	movw	r24, r0
     3e8:	3f 9f       	mul	r19, r31
     3ea:	90 0d       	add	r25, r0
     3ec:	11 24       	eor	r1, r1
     3ee:	4b 85       	ldd	r20, Y+11	; 0x0b
     3f0:	5c 85       	ldd	r21, Y+12	; 0x0c
     3f2:	b8 01       	movw	r22, r16
     3f4:	64 1b       	sub	r22, r20
     3f6:	75 0b       	sbc	r23, r21
     3f8:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodhi4>
     3fc:	96 2f       	mov	r25, r22
	}

	if (pos.x > 100) pos.x = 100;
     3fe:	25 36       	cpi	r18, 0x65	; 101
     400:	0c f0       	brlt	.+2      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
     402:	24 e6       	ldi	r18, 0x64	; 100
	if (pos.x < -100) pos.x = -100;
     404:	2c 39       	cpi	r18, 0x9C	; 156
     406:	0c f4       	brge	.+2      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
     408:	2c e9       	ldi	r18, 0x9C	; 156
	if (pos.y > 100) pos.y = 100;
     40a:	95 36       	cpi	r25, 0x65	; 101
     40c:	0c f0       	brlt	.+2      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
     40e:	94 e6       	ldi	r25, 0x64	; 100
	if (pos.y < -100) pos.y = -100;
     410:	9c 39       	cpi	r25, 0x9C	; 156
     412:	0c f4       	brge	.+2      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     414:	9c e9       	ldi	r25, 0x9C	; 156

	return pos;
}
     416:	82 2f       	mov	r24, r18
     418:	2c 96       	adiw	r28, 0x0c	; 12
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	08 95       	ret

00000432 <Get_Joystick_Direction>:
char* Get_Joystick_Direction(JoystickPosition pos) 
{	
/*Direction based on thresholds*/
	if (pos.x > JOYSTICK_NEUTRAL_THRESHOLD) 
     432:	8b 30       	cpi	r24, 0x0B	; 11
     434:	4c f4       	brge	.+18     	; 0x448 <Get_Joystick_Direction+0x16>
	{
		return "RIGHT";
	} 
	else if (pos.x < -JOYSTICK_NEUTRAL_THRESHOLD) 
     436:	86 3f       	cpi	r24, 0xF6	; 246
     438:	54 f0       	brlt	.+20     	; 0x44e <Get_Joystick_Direction+0x1c>
	{
		return "LEFT";
	} 
	else if (pos.y > JOYSTICK_NEUTRAL_THRESHOLD) 
     43a:	9b 30       	cpi	r25, 0x0B	; 11
     43c:	5c f4       	brge	.+22     	; 0x454 <Get_Joystick_Direction+0x22>
	{
		return "UP";
	} 
	else if (pos.y < -JOYSTICK_NEUTRAL_THRESHOLD) 
     43e:	96 3f       	cpi	r25, 0xF6	; 246
     440:	64 f4       	brge	.+24     	; 0x45a <Get_Joystick_Direction+0x28>
	{
		return "DOWN";
     442:	87 eb       	ldi	r24, 0xB7	; 183
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	08 95       	ret
char* Get_Joystick_Direction(JoystickPosition pos) 
{	
/*Direction based on thresholds*/
	if (pos.x > JOYSTICK_NEUTRAL_THRESHOLD) 
	{
		return "RIGHT";
     448:	89 ea       	ldi	r24, 0xA9	; 169
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	08 95       	ret
	} 
	else if (pos.x < -JOYSTICK_NEUTRAL_THRESHOLD) 
	{
		return "LEFT";
     44e:	8f ea       	ldi	r24, 0xAF	; 175
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	08 95       	ret
	} 
	else if (pos.y > JOYSTICK_NEUTRAL_THRESHOLD) 
	{
		return "UP";
     454:	84 eb       	ldi	r24, 0xB4	; 180
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	08 95       	ret
	{
		return "DOWN";
	} 
	else 
	{
		return "NEUTRAL";
     45a:	8c eb       	ldi	r24, 0xBC	; 188
     45c:	92 e0       	ldi	r25, 0x02	; 2
	}
}
     45e:	08 95       	ret

00000460 <Get_Slider_Position>:
	return(angle);
}
*/
int8_t Get_Slider_Position(uint8_t slider)
{
	uint16_t adc_x = ADC_Read(slider);
     460:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>

	/*Convert ADC value (0-255) to a percentage (0% to 100%)*/
	return (adc_x * 100/255);
     464:	94 e6       	ldi	r25, 0x64	; 100
     466:	89 9f       	mul	r24, r25
     468:	90 01       	movw	r18, r0
     46a:	11 24       	eor	r1, r1
     46c:	a1 e8       	ldi	r26, 0x81	; 129
     46e:	b0 e8       	ldi	r27, 0x80	; 128
     470:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__umulhisi3>
     474:	88 0f       	add	r24, r24
     476:	89 2f       	mov	r24, r25
     478:	88 1f       	adc	r24, r24
     47a:	99 0b       	sbc	r25, r25
     47c:	91 95       	neg	r25
}
     47e:	08 95       	ret

00000480 <Init_ADC>:

void Init_ADC()
{
/*Configure PD5 as output (to provide a clock to the ADC)*/
	DDRD |= (1 << ADC_CLOCK_PIN);
     480:	81 b3       	in	r24, 0x11	; 17
     482:	80 62       	ori	r24, 0x20	; 32
     484:	81 bb       	out	0x11, r24	; 17
/**/
	TCCR1A &= ~(1 << WGM10) & ~(1 << WGM11);
     486:	8f b5       	in	r24, 0x2f	; 47
     488:	8c 7f       	andi	r24, 0xFC	; 252
     48a:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1A0);
     48c:	8f b5       	in	r24, 0x2f	; 47
     48e:	80 64       	ori	r24, 0x40	; 64
     490:	8f bd       	out	0x2f, r24	; 47
/*Prescaler is 1*/
	TCCR1B |= (1 << CS10) | (1 << WGM12) ;
     492:	8e b5       	in	r24, 0x2e	; 46
     494:	89 60       	ori	r24, 0x09	; 9
     496:	8e bd       	out	0x2e, r24	; 46
/*Half of duty cycle in 0-255 8bit timer register*/
	OCR1AL = 0;
     498:	1a bc       	out	0x2a, r1	; 42
	OCR1AH = 0;
     49a:	1b bc       	out	0x2b, r1	; 43
     49c:	08 95       	ret

0000049e <main>:
/* === Define area === */

/* === Global variable === */
char tx_data;

int main(void) {
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	2c 97       	sbiw	r28, 0x0c	; 12
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
	Init();
     4b2:	0e 94 ef 02 	call	0x5de	; 0x5de <Init>
	USART_Init(UBBR);
     4b6:	8f e1       	ldi	r24, 0x1F	; 31
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_Init>
	Init_ADC();
     4be:	0e 94 40 02 	call	0x480	; 0x480 <Init_ADC>
	
	FILE *uart_stream = fdevopen(USART_Transmit_Char, USART_Receive_Char);
     4c2:	68 e1       	ldi	r22, 0x18	; 24
     4c4:	73 e0       	ldi	r23, 0x03	; 3
     4c6:	8a e0       	ldi	r24, 0x0A	; 10
     4c8:	93 e0       	ldi	r25, 0x03	; 3
     4ca:	0e 94 95 03 	call	0x72a	; 0x72a <fdevopen>
	
	stdout = uart_stream;
     4ce:	e8 e5       	ldi	r30, 0x58	; 88
     4d0:	f3 e0       	ldi	r31, 0x03	; 3
     4d2:	93 83       	std	Z+3, r25	; 0x03
     4d4:	82 83       	std	Z+2, r24	; 0x02
	stdin = uart_stream;
     4d6:	91 83       	std	Z+1, r25	; 0x01
     4d8:	80 83       	st	Z, r24
	
	printf("I am printf!\n\r");
     4da:	89 ed       	ldi	r24, 0xD9	; 217
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>
	JoystickPosition pos = {0,0};
	
	int8_t poss = {0};
	int8_t poss_right = {0};	
	
	JoystickCalibration joystick_calibration = Calibrate_Joystick();
     4e6:	ce 01       	movw	r24, r28
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	0e 94 66 00 	call	0xcc	; 0xcc <Calibrate_Joystick>
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0

	while(1)
	{	
		/*Right touch button*/
		DDRE &= ~(1 << PE0);
     4f2:	86 b1       	in	r24, 0x06	; 6
     4f4:	8e 7f       	andi	r24, 0xFE	; 254
     4f6:	86 b9       	out	0x06, r24	; 6
		PORTE |= (1 << PE0);
     4f8:	87 b1       	in	r24, 0x07	; 7
     4fa:	81 60       	ori	r24, 0x01	; 1
     4fc:	87 b9       	out	0x07, r24	; 7
		/*Left touch button*/
		DDRE &= ~(1 << PE2);
     4fe:	86 b1       	in	r24, 0x06	; 6
     500:	8b 7f       	andi	r24, 0xFB	; 251
     502:	86 b9       	out	0x06, r24	; 6
		PORTE |= (1 << PE2);
     504:	87 b1       	in	r24, 0x07	; 7
     506:	84 60       	ori	r24, 0x04	; 4
     508:	87 b9       	out	0x07, r24	; 7
		/*joystick touch button, inverted logic*/
		DDRB &= ~(1 << PB2);
     50a:	87 b3       	in	r24, 0x17	; 23
     50c:	8b 7f       	andi	r24, 0xFB	; 251
     50e:	87 bb       	out	0x17, r24	; 23
		uint8_t pin_valueB2 = PINB & (1 << PB2);
		printf("PIN value right touch button: %d\n\r", pin_valueE0);
		printf("PIN value left touch button: %d\n\r", pin_valueE2);
		printf("PIN value joystick touch button: %d\n\r", pin_valueB2);
		_delay_ms(800);*/
		pos = Get_Joystick_Position(joystick_calibration);
     510:	e9 80       	ldd	r14, Y+1	; 0x01
     512:	fa 80       	ldd	r15, Y+2	; 0x02
     514:	0b 81       	ldd	r16, Y+3	; 0x03
     516:	1c 81       	ldd	r17, Y+4	; 0x04
     518:	2d 81       	ldd	r18, Y+5	; 0x05
     51a:	3e 81       	ldd	r19, Y+6	; 0x06
     51c:	4f 81       	ldd	r20, Y+7	; 0x07
     51e:	58 85       	ldd	r21, Y+8	; 0x08
     520:	69 85       	ldd	r22, Y+9	; 0x09
     522:	7a 85       	ldd	r23, Y+10	; 0x0a
     524:	8b 85       	ldd	r24, Y+11	; 0x0b
     526:	9c 85       	ldd	r25, Y+12	; 0x0c
     528:	0e 94 94 01 	call	0x328	; 0x328 <Get_Joystick_Position>
     52c:	08 2f       	mov	r16, r24
     52e:	19 2f       	mov	r17, r25
		printf("Position x: %d , Position y: %d \n\r",pos.x, pos.y);
     530:	89 2f       	mov	r24, r25
     532:	99 0f       	add	r25, r25
     534:	99 0b       	sbc	r25, r25
     536:	9f 93       	push	r25
     538:	1f 93       	push	r17
     53a:	80 2f       	mov	r24, r16
     53c:	00 2e       	mov	r0, r16
     53e:	00 0c       	add	r0, r0
     540:	99 0b       	sbc	r25, r25
     542:	9f 93       	push	r25
     544:	0f 93       	push	r16
     546:	88 ee       	ldi	r24, 0xE8	; 232
     548:	92 e0       	ldi	r25, 0x02	; 2
     54a:	9f 93       	push	r25
     54c:	8f 93       	push	r24
     54e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>
		printf("Position of joystick: %s\n\r", Get_Joystick_Direction(pos));
     552:	80 2f       	mov	r24, r16
     554:	91 2f       	mov	r25, r17
     556:	0e 94 19 02 	call	0x432	; 0x432 <Get_Joystick_Direction>
     55a:	9f 93       	push	r25
     55c:	8f 93       	push	r24
     55e:	8b e0       	ldi	r24, 0x0B	; 11
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	9f 93       	push	r25
     564:	8f 93       	push	r24
     566:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>
     56a:	2f ef       	ldi	r18, 0xFF	; 255
     56c:	4f ef       	ldi	r20, 0xFF	; 255
     56e:	5b e0       	ldi	r21, 0x0B	; 11
     570:	21 50       	subi	r18, 0x01	; 1
     572:	40 40       	sbci	r20, 0x00	; 0
     574:	50 40       	sbci	r21, 0x00	; 0
     576:	e1 f7       	brne	.-8      	; 0x570 <__stack+0x71>
     578:	00 c0       	rjmp	.+0      	; 0x57a <__stack+0x7b>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <__stack+0x7d>
		_delay_ms(800);
		poss = Get_Slider_Position(ADC_CHANNEL_SLIDER_LEFT);
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	0e 94 30 02 	call	0x460	; 0x460 <Get_Slider_Position>
		printf("Position LEFT : %d %%\n\r",100-poss);	
     582:	24 e6       	ldi	r18, 0x64	; 100
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	a9 01       	movw	r20, r18
     588:	48 1b       	sub	r20, r24
     58a:	51 09       	sbc	r21, r1
     58c:	87 fd       	sbrc	r24, 7
     58e:	53 95       	inc	r21
     590:	ca 01       	movw	r24, r20
     592:	9f 93       	push	r25
     594:	4f 93       	push	r20
     596:	86 e2       	ldi	r24, 0x26	; 38
     598:	93 e0       	ldi	r25, 0x03	; 3
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>
		poss_right = Get_Slider_Position(ADC_CHANNEL_SLIDER_RIGHT);
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	0e 94 30 02 	call	0x460	; 0x460 <Get_Slider_Position>
		printf("Position RIGHT : %d %%\n\r",poss_right);
     5a8:	28 2f       	mov	r18, r24
     5aa:	08 2e       	mov	r0, r24
     5ac:	00 0c       	add	r0, r0
     5ae:	33 0b       	sbc	r19, r19
     5b0:	3f 93       	push	r19
     5b2:	8f 93       	push	r24
     5b4:	8e e3       	ldi	r24, 0x3E	; 62
     5b6:	93 e0       	ldi	r25, 0x03	; 3
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24
     5bc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>
     5c0:	5f ef       	ldi	r21, 0xFF	; 255
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	9b e0       	ldi	r25, 0x0B	; 11
     5c6:	51 50       	subi	r21, 0x01	; 1
     5c8:	80 40       	sbci	r24, 0x00	; 0
     5ca:	90 40       	sbci	r25, 0x00	; 0
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <__stack+0xc7>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <__stack+0xd1>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <__stack+0xd3>
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	8a cf       	rjmp	.-236    	; 0x4f2 <main+0x54>

000005de <Init>:
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase\n\r", write_errors);
	printf("SRAM test completed with \n%4d errors in retrieval phase\n\r", retrieval_errors);
}
     5de:	85 b7       	in	r24, 0x35	; 53
     5e0:	80 68       	ori	r24, 0x80	; 128
     5e2:	85 bf       	out	0x35, r24	; 53
     5e4:	80 b7       	in	r24, 0x30	; 48
     5e6:	80 62       	ori	r24, 0x20	; 32
     5e8:	80 bf       	out	0x30, r24	; 48
     5ea:	08 95       	ret

000005ec <XMEM_Write>:

void XMEM_Write(uint8_t data, uint16_t addr)
{
	volatile uint8_t *ext_mem = (uint8_t *)(addr);
	*ext_mem = data;
     5ec:	fb 01       	movw	r30, r22
     5ee:	80 83       	st	Z, r24
     5f0:	08 95       	ret

000005f2 <XMEM_Read>:
}

uint8_t XMEM_Read(uint16_t addr)
{
	volatile uint8_t *ext_mem = (uint8_t *)(addr);
	return *ext_mem;
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
}
     5f6:	08 95       	ret

000005f8 <USART_Init>:
char USART_Receive(void)
{
/*Do nothing until data have been recieved and is ready to be read from UDR*/
	while (!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
     5f8:	90 bd       	out	0x20, r25	; 32
     5fa:	89 b9       	out	0x09, r24	; 9
     5fc:	8b b1       	in	r24, 0x0b	; 11
     5fe:	8d 7f       	andi	r24, 0xFD	; 253
     600:	8b b9       	out	0x0b, r24	; 11
     602:	88 e1       	ldi	r24, 0x18	; 24
     604:	8a b9       	out	0x0a, r24	; 10
     606:	86 e8       	ldi	r24, 0x86	; 134
     608:	80 bd       	out	0x20, r24	; 32
     60a:	08 95       	ret

0000060c <USART_Transmit>:
     60c:	5d 9b       	sbis	0x0b, 5	; 11
     60e:	fe cf       	rjmp	.-4      	; 0x60c <USART_Transmit>
     610:	8c b9       	out	0x0c, r24	; 12
     612:	08 95       	ret

00000614 <USART_Transmit_Char>:

int USART_Transmit_Char(char c, FILE *stream)
{
     614:	cf 93       	push	r28
     616:	c8 2f       	mov	r28, r24
	if (c == '\n')
     618:	8a 30       	cpi	r24, 0x0A	; 10
     61a:	19 f4       	brne	.+6      	; 0x622 <USART_Transmit_Char+0xe>
	{
		USART_Transmit('\r');
     61c:	8d e0       	ldi	r24, 0x0D	; 13
     61e:	0e 94 06 03 	call	0x60c	; 0x60c <USART_Transmit>
	}
	USART_Transmit(c);
     622:	8c 2f       	mov	r24, r28
     624:	0e 94 06 03 	call	0x60c	; 0x60c <USART_Transmit>
	return 0;
}
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <USART_Receive_Char>:

int USART_Receive_Char(FILE *stream)
{
/* Wait until data is received */
	while (!(UCSR0A & (1 << RXC0)));
     630:	5f 9b       	sbis	0x0b, 7	; 11
     632:	fe cf       	rjmp	.-4      	; 0x630 <USART_Receive_Char>
	return UDR0;
     634:	8c b1       	in	r24, 0x0c	; 12
}
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	08 95       	ret

0000063a <__divmodhi4>:
     63a:	97 fb       	bst	r25, 7
     63c:	07 2e       	mov	r0, r23
     63e:	16 f4       	brtc	.+4      	; 0x644 <__divmodhi4+0xa>
     640:	00 94       	com	r0
     642:	07 d0       	rcall	.+14     	; 0x652 <__divmodhi4_neg1>
     644:	77 fd       	sbrc	r23, 7
     646:	09 d0       	rcall	.+18     	; 0x65a <__divmodhi4_neg2>
     648:	0e 94 5f 03 	call	0x6be	; 0x6be <__udivmodhi4>
     64c:	07 fc       	sbrc	r0, 7
     64e:	05 d0       	rcall	.+10     	; 0x65a <__divmodhi4_neg2>
     650:	3e f4       	brtc	.+14     	; 0x660 <__divmodhi4_exit>

00000652 <__divmodhi4_neg1>:
     652:	90 95       	com	r25
     654:	81 95       	neg	r24
     656:	9f 4f       	sbci	r25, 0xFF	; 255
     658:	08 95       	ret

0000065a <__divmodhi4_neg2>:
     65a:	70 95       	com	r23
     65c:	61 95       	neg	r22
     65e:	7f 4f       	sbci	r23, 0xFF	; 255

00000660 <__divmodhi4_exit>:
     660:	08 95       	ret

00000662 <__divmodsi4>:
     662:	05 2e       	mov	r0, r21
     664:	97 fb       	bst	r25, 7
     666:	1e f4       	brtc	.+6      	; 0x66e <__divmodsi4+0xc>
     668:	00 94       	com	r0
     66a:	0e 94 48 03 	call	0x690	; 0x690 <__negsi2>
     66e:	57 fd       	sbrc	r21, 7
     670:	07 d0       	rcall	.+14     	; 0x680 <__divmodsi4_neg2>
     672:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__udivmodsi4>
     676:	07 fc       	sbrc	r0, 7
     678:	03 d0       	rcall	.+6      	; 0x680 <__divmodsi4_neg2>
     67a:	4e f4       	brtc	.+18     	; 0x68e <__divmodsi4_exit>
     67c:	0c 94 48 03 	jmp	0x690	; 0x690 <__negsi2>

00000680 <__divmodsi4_neg2>:
     680:	50 95       	com	r21
     682:	40 95       	com	r20
     684:	30 95       	com	r19
     686:	21 95       	neg	r18
     688:	3f 4f       	sbci	r19, 0xFF	; 255
     68a:	4f 4f       	sbci	r20, 0xFF	; 255
     68c:	5f 4f       	sbci	r21, 0xFF	; 255

0000068e <__divmodsi4_exit>:
     68e:	08 95       	ret

00000690 <__negsi2>:
     690:	90 95       	com	r25
     692:	80 95       	com	r24
     694:	70 95       	com	r23
     696:	61 95       	neg	r22
     698:	7f 4f       	sbci	r23, 0xFF	; 255
     69a:	8f 4f       	sbci	r24, 0xFF	; 255
     69c:	9f 4f       	sbci	r25, 0xFF	; 255
     69e:	08 95       	ret

000006a0 <__umulhisi3>:
     6a0:	a2 9f       	mul	r26, r18
     6a2:	b0 01       	movw	r22, r0
     6a4:	b3 9f       	mul	r27, r19
     6a6:	c0 01       	movw	r24, r0
     6a8:	a3 9f       	mul	r26, r19
     6aa:	70 0d       	add	r23, r0
     6ac:	81 1d       	adc	r24, r1
     6ae:	11 24       	eor	r1, r1
     6b0:	91 1d       	adc	r25, r1
     6b2:	b2 9f       	mul	r27, r18
     6b4:	70 0d       	add	r23, r0
     6b6:	81 1d       	adc	r24, r1
     6b8:	11 24       	eor	r1, r1
     6ba:	91 1d       	adc	r25, r1
     6bc:	08 95       	ret

000006be <__udivmodhi4>:
     6be:	aa 1b       	sub	r26, r26
     6c0:	bb 1b       	sub	r27, r27
     6c2:	51 e1       	ldi	r21, 0x11	; 17
     6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <__udivmodhi4_ep>

000006c6 <__udivmodhi4_loop>:
     6c6:	aa 1f       	adc	r26, r26
     6c8:	bb 1f       	adc	r27, r27
     6ca:	a6 17       	cp	r26, r22
     6cc:	b7 07       	cpc	r27, r23
     6ce:	10 f0       	brcs	.+4      	; 0x6d4 <__udivmodhi4_ep>
     6d0:	a6 1b       	sub	r26, r22
     6d2:	b7 0b       	sbc	r27, r23

000006d4 <__udivmodhi4_ep>:
     6d4:	88 1f       	adc	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	5a 95       	dec	r21
     6da:	a9 f7       	brne	.-22     	; 0x6c6 <__udivmodhi4_loop>
     6dc:	80 95       	com	r24
     6de:	90 95       	com	r25
     6e0:	bc 01       	movw	r22, r24
     6e2:	cd 01       	movw	r24, r26
     6e4:	08 95       	ret

000006e6 <__udivmodsi4>:
     6e6:	a1 e2       	ldi	r26, 0x21	; 33
     6e8:	1a 2e       	mov	r1, r26
     6ea:	aa 1b       	sub	r26, r26
     6ec:	bb 1b       	sub	r27, r27
     6ee:	fd 01       	movw	r30, r26
     6f0:	0d c0       	rjmp	.+26     	; 0x70c <__udivmodsi4_ep>

000006f2 <__udivmodsi4_loop>:
     6f2:	aa 1f       	adc	r26, r26
     6f4:	bb 1f       	adc	r27, r27
     6f6:	ee 1f       	adc	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	a2 17       	cp	r26, r18
     6fc:	b3 07       	cpc	r27, r19
     6fe:	e4 07       	cpc	r30, r20
     700:	f5 07       	cpc	r31, r21
     702:	20 f0       	brcs	.+8      	; 0x70c <__udivmodsi4_ep>
     704:	a2 1b       	sub	r26, r18
     706:	b3 0b       	sbc	r27, r19
     708:	e4 0b       	sbc	r30, r20
     70a:	f5 0b       	sbc	r31, r21

0000070c <__udivmodsi4_ep>:
     70c:	66 1f       	adc	r22, r22
     70e:	77 1f       	adc	r23, r23
     710:	88 1f       	adc	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	1a 94       	dec	r1
     716:	69 f7       	brne	.-38     	; 0x6f2 <__udivmodsi4_loop>
     718:	60 95       	com	r22
     71a:	70 95       	com	r23
     71c:	80 95       	com	r24
     71e:	90 95       	com	r25
     720:	9b 01       	movw	r18, r22
     722:	ac 01       	movw	r20, r24
     724:	bd 01       	movw	r22, r26
     726:	cf 01       	movw	r24, r30
     728:	08 95       	ret

0000072a <fdevopen>:
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	00 97       	sbiw	r24, 0x00	; 0
     734:	31 f4       	brne	.+12     	; 0x742 <fdevopen+0x18>
     736:	61 15       	cp	r22, r1
     738:	71 05       	cpc	r23, r1
     73a:	19 f4       	brne	.+6      	; 0x742 <fdevopen+0x18>
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	3a c0       	rjmp	.+116    	; 0x7b6 <fdevopen+0x8c>
     742:	8b 01       	movw	r16, r22
     744:	ec 01       	movw	r28, r24
     746:	6e e0       	ldi	r22, 0x0E	; 14
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 07 06 	call	0xc0e	; 0xc0e <calloc>
     752:	fc 01       	movw	r30, r24
     754:	89 2b       	or	r24, r25
     756:	91 f3       	breq	.-28     	; 0x73c <fdevopen+0x12>
     758:	80 e8       	ldi	r24, 0x80	; 128
     75a:	83 83       	std	Z+3, r24	; 0x03
     75c:	01 15       	cp	r16, r1
     75e:	11 05       	cpc	r17, r1
     760:	71 f0       	breq	.+28     	; 0x77e <fdevopen+0x54>
     762:	13 87       	std	Z+11, r17	; 0x0b
     764:	02 87       	std	Z+10, r16	; 0x0a
     766:	81 e8       	ldi	r24, 0x81	; 129
     768:	83 83       	std	Z+3, r24	; 0x03
     76a:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <__data_end>
     76e:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <__data_end+0x1>
     772:	89 2b       	or	r24, r25
     774:	21 f4       	brne	.+8      	; 0x77e <fdevopen+0x54>
     776:	f0 93 59 03 	sts	0x0359, r31	; 0x800359 <__data_end+0x1>
     77a:	e0 93 58 03 	sts	0x0358, r30	; 0x800358 <__data_end>
     77e:	20 97       	sbiw	r28, 0x00	; 0
     780:	c9 f0       	breq	.+50     	; 0x7b4 <fdevopen+0x8a>
     782:	d1 87       	std	Z+9, r29	; 0x09
     784:	c0 87       	std	Z+8, r28	; 0x08
     786:	83 81       	ldd	r24, Z+3	; 0x03
     788:	82 60       	ori	r24, 0x02	; 2
     78a:	83 83       	std	Z+3, r24	; 0x03
     78c:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <__data_end+0x2>
     790:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <__data_end+0x3>
     794:	89 2b       	or	r24, r25
     796:	71 f4       	brne	.+28     	; 0x7b4 <fdevopen+0x8a>
     798:	f0 93 5b 03 	sts	0x035B, r31	; 0x80035b <__data_end+0x3>
     79c:	e0 93 5a 03 	sts	0x035A, r30	; 0x80035a <__data_end+0x2>
     7a0:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <__data_end+0x4>
     7a4:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <__data_end+0x5>
     7a8:	89 2b       	or	r24, r25
     7aa:	21 f4       	brne	.+8      	; 0x7b4 <fdevopen+0x8a>
     7ac:	f0 93 5d 03 	sts	0x035D, r31	; 0x80035d <__data_end+0x5>
     7b0:	e0 93 5c 03 	sts	0x035C, r30	; 0x80035c <__data_end+0x4>
     7b4:	cf 01       	movw	r24, r30
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	08 95       	ret

000007c0 <printf>:
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	e6 ee       	ldi	r30, 0xE6	; 230
     7c6:	f3 e0       	ldi	r31, 0x03	; 3
     7c8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__prologue_saves__+0x20>
     7cc:	ae 01       	movw	r20, r28
     7ce:	4b 5f       	subi	r20, 0xFB	; 251
     7d0:	5f 4f       	sbci	r21, 0xFF	; 255
     7d2:	fa 01       	movw	r30, r20
     7d4:	61 91       	ld	r22, Z+
     7d6:	71 91       	ld	r23, Z+
     7d8:	af 01       	movw	r20, r30
     7da:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <__data_end+0x2>
     7de:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <__data_end+0x3>
     7e2:	0e 94 26 04 	call	0x84c	; 0x84c <vfprintf>
     7e6:	e2 e0       	ldi	r30, 0x02	; 2
     7e8:	0c 94 27 08 	jmp	0x104e	; 0x104e <__epilogue_restores__+0x20>

000007ec <puts>:
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <__data_end+0x2>
     7f8:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <__data_end+0x3>
     7fc:	23 81       	ldd	r18, Z+3	; 0x03
     7fe:	21 ff       	sbrs	r18, 1
     800:	1b c0       	rjmp	.+54     	; 0x838 <puts+0x4c>
     802:	8c 01       	movw	r16, r24
     804:	d0 e0       	ldi	r29, 0x00	; 0
     806:	c0 e0       	ldi	r28, 0x00	; 0
     808:	f8 01       	movw	r30, r16
     80a:	81 91       	ld	r24, Z+
     80c:	8f 01       	movw	r16, r30
     80e:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <__data_end+0x2>
     812:	70 91 5b 03 	lds	r23, 0x035B	; 0x80035b <__data_end+0x3>
     816:	db 01       	movw	r26, r22
     818:	18 96       	adiw	r26, 0x08	; 8
     81a:	ed 91       	ld	r30, X+
     81c:	fc 91       	ld	r31, X
     81e:	19 97       	sbiw	r26, 0x09	; 9
     820:	88 23       	and	r24, r24
     822:	31 f0       	breq	.+12     	; 0x830 <puts+0x44>
     824:	09 95       	icall
     826:	89 2b       	or	r24, r25
     828:	79 f3       	breq	.-34     	; 0x808 <puts+0x1c>
     82a:	df ef       	ldi	r29, 0xFF	; 255
     82c:	cf ef       	ldi	r28, 0xFF	; 255
     82e:	ec cf       	rjmp	.-40     	; 0x808 <puts+0x1c>
     830:	8a e0       	ldi	r24, 0x0A	; 10
     832:	09 95       	icall
     834:	89 2b       	or	r24, r25
     836:	19 f0       	breq	.+6      	; 0x83e <puts+0x52>
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	9f ef       	ldi	r25, 0xFF	; 255
     83c:	02 c0       	rjmp	.+4      	; 0x842 <puts+0x56>
     83e:	8d 2f       	mov	r24, r29
     840:	9c 2f       	mov	r25, r28
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	08 95       	ret

0000084c <vfprintf>:
     84c:	ab e0       	ldi	r26, 0x0B	; 11
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ec e2       	ldi	r30, 0x2C	; 44
     852:	f4 e0       	ldi	r31, 0x04	; 4
     854:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__prologue_saves__>
     858:	6c 01       	movw	r12, r24
     85a:	7b 01       	movw	r14, r22
     85c:	8a 01       	movw	r16, r20
     85e:	fc 01       	movw	r30, r24
     860:	17 82       	std	Z+7, r1	; 0x07
     862:	16 82       	std	Z+6, r1	; 0x06
     864:	83 81       	ldd	r24, Z+3	; 0x03
     866:	81 ff       	sbrs	r24, 1
     868:	cc c1       	rjmp	.+920    	; 0xc02 <vfprintf+0x3b6>
     86a:	ce 01       	movw	r24, r28
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	3c 01       	movw	r6, r24
     870:	f6 01       	movw	r30, r12
     872:	93 81       	ldd	r25, Z+3	; 0x03
     874:	f7 01       	movw	r30, r14
     876:	93 fd       	sbrc	r25, 3
     878:	85 91       	lpm	r24, Z+
     87a:	93 ff       	sbrs	r25, 3
     87c:	81 91       	ld	r24, Z+
     87e:	7f 01       	movw	r14, r30
     880:	88 23       	and	r24, r24
     882:	09 f4       	brne	.+2      	; 0x886 <vfprintf+0x3a>
     884:	ba c1       	rjmp	.+884    	; 0xbfa <vfprintf+0x3ae>
     886:	85 32       	cpi	r24, 0x25	; 37
     888:	39 f4       	brne	.+14     	; 0x898 <vfprintf+0x4c>
     88a:	93 fd       	sbrc	r25, 3
     88c:	85 91       	lpm	r24, Z+
     88e:	93 ff       	sbrs	r25, 3
     890:	81 91       	ld	r24, Z+
     892:	7f 01       	movw	r14, r30
     894:	85 32       	cpi	r24, 0x25	; 37
     896:	29 f4       	brne	.+10     	; 0x8a2 <vfprintf+0x56>
     898:	b6 01       	movw	r22, r12
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 61 07 	call	0xec2	; 0xec2 <fputc>
     8a0:	e7 cf       	rjmp	.-50     	; 0x870 <vfprintf+0x24>
     8a2:	91 2c       	mov	r9, r1
     8a4:	21 2c       	mov	r2, r1
     8a6:	31 2c       	mov	r3, r1
     8a8:	ff e1       	ldi	r31, 0x1F	; 31
     8aa:	f3 15       	cp	r31, r3
     8ac:	d8 f0       	brcs	.+54     	; 0x8e4 <vfprintf+0x98>
     8ae:	8b 32       	cpi	r24, 0x2B	; 43
     8b0:	79 f0       	breq	.+30     	; 0x8d0 <vfprintf+0x84>
     8b2:	38 f4       	brcc	.+14     	; 0x8c2 <vfprintf+0x76>
     8b4:	80 32       	cpi	r24, 0x20	; 32
     8b6:	79 f0       	breq	.+30     	; 0x8d6 <vfprintf+0x8a>
     8b8:	83 32       	cpi	r24, 0x23	; 35
     8ba:	a1 f4       	brne	.+40     	; 0x8e4 <vfprintf+0x98>
     8bc:	23 2d       	mov	r18, r3
     8be:	20 61       	ori	r18, 0x10	; 16
     8c0:	1d c0       	rjmp	.+58     	; 0x8fc <vfprintf+0xb0>
     8c2:	8d 32       	cpi	r24, 0x2D	; 45
     8c4:	61 f0       	breq	.+24     	; 0x8de <vfprintf+0x92>
     8c6:	80 33       	cpi	r24, 0x30	; 48
     8c8:	69 f4       	brne	.+26     	; 0x8e4 <vfprintf+0x98>
     8ca:	23 2d       	mov	r18, r3
     8cc:	21 60       	ori	r18, 0x01	; 1
     8ce:	16 c0       	rjmp	.+44     	; 0x8fc <vfprintf+0xb0>
     8d0:	83 2d       	mov	r24, r3
     8d2:	82 60       	ori	r24, 0x02	; 2
     8d4:	38 2e       	mov	r3, r24
     8d6:	e3 2d       	mov	r30, r3
     8d8:	e4 60       	ori	r30, 0x04	; 4
     8da:	3e 2e       	mov	r3, r30
     8dc:	2a c0       	rjmp	.+84     	; 0x932 <vfprintf+0xe6>
     8de:	f3 2d       	mov	r31, r3
     8e0:	f8 60       	ori	r31, 0x08	; 8
     8e2:	1d c0       	rjmp	.+58     	; 0x91e <vfprintf+0xd2>
     8e4:	37 fc       	sbrc	r3, 7
     8e6:	2d c0       	rjmp	.+90     	; 0x942 <vfprintf+0xf6>
     8e8:	20 ed       	ldi	r18, 0xD0	; 208
     8ea:	28 0f       	add	r18, r24
     8ec:	2a 30       	cpi	r18, 0x0A	; 10
     8ee:	40 f0       	brcs	.+16     	; 0x900 <vfprintf+0xb4>
     8f0:	8e 32       	cpi	r24, 0x2E	; 46
     8f2:	b9 f4       	brne	.+46     	; 0x922 <vfprintf+0xd6>
     8f4:	36 fc       	sbrc	r3, 6
     8f6:	81 c1       	rjmp	.+770    	; 0xbfa <vfprintf+0x3ae>
     8f8:	23 2d       	mov	r18, r3
     8fa:	20 64       	ori	r18, 0x40	; 64
     8fc:	32 2e       	mov	r3, r18
     8fe:	19 c0       	rjmp	.+50     	; 0x932 <vfprintf+0xe6>
     900:	36 fe       	sbrs	r3, 6
     902:	06 c0       	rjmp	.+12     	; 0x910 <vfprintf+0xc4>
     904:	8a e0       	ldi	r24, 0x0A	; 10
     906:	98 9e       	mul	r9, r24
     908:	20 0d       	add	r18, r0
     90a:	11 24       	eor	r1, r1
     90c:	92 2e       	mov	r9, r18
     90e:	11 c0       	rjmp	.+34     	; 0x932 <vfprintf+0xe6>
     910:	ea e0       	ldi	r30, 0x0A	; 10
     912:	2e 9e       	mul	r2, r30
     914:	20 0d       	add	r18, r0
     916:	11 24       	eor	r1, r1
     918:	22 2e       	mov	r2, r18
     91a:	f3 2d       	mov	r31, r3
     91c:	f0 62       	ori	r31, 0x20	; 32
     91e:	3f 2e       	mov	r3, r31
     920:	08 c0       	rjmp	.+16     	; 0x932 <vfprintf+0xe6>
     922:	8c 36       	cpi	r24, 0x6C	; 108
     924:	21 f4       	brne	.+8      	; 0x92e <vfprintf+0xe2>
     926:	83 2d       	mov	r24, r3
     928:	80 68       	ori	r24, 0x80	; 128
     92a:	38 2e       	mov	r3, r24
     92c:	02 c0       	rjmp	.+4      	; 0x932 <vfprintf+0xe6>
     92e:	88 36       	cpi	r24, 0x68	; 104
     930:	41 f4       	brne	.+16     	; 0x942 <vfprintf+0xf6>
     932:	f7 01       	movw	r30, r14
     934:	93 fd       	sbrc	r25, 3
     936:	85 91       	lpm	r24, Z+
     938:	93 ff       	sbrs	r25, 3
     93a:	81 91       	ld	r24, Z+
     93c:	7f 01       	movw	r14, r30
     93e:	81 11       	cpse	r24, r1
     940:	b3 cf       	rjmp	.-154    	; 0x8a8 <vfprintf+0x5c>
     942:	98 2f       	mov	r25, r24
     944:	9f 7d       	andi	r25, 0xDF	; 223
     946:	95 54       	subi	r25, 0x45	; 69
     948:	93 30       	cpi	r25, 0x03	; 3
     94a:	28 f4       	brcc	.+10     	; 0x956 <vfprintf+0x10a>
     94c:	0c 5f       	subi	r16, 0xFC	; 252
     94e:	1f 4f       	sbci	r17, 0xFF	; 255
     950:	9f e3       	ldi	r25, 0x3F	; 63
     952:	99 83       	std	Y+1, r25	; 0x01
     954:	0d c0       	rjmp	.+26     	; 0x970 <vfprintf+0x124>
     956:	83 36       	cpi	r24, 0x63	; 99
     958:	31 f0       	breq	.+12     	; 0x966 <vfprintf+0x11a>
     95a:	83 37       	cpi	r24, 0x73	; 115
     95c:	71 f0       	breq	.+28     	; 0x97a <vfprintf+0x12e>
     95e:	83 35       	cpi	r24, 0x53	; 83
     960:	09 f0       	breq	.+2      	; 0x964 <vfprintf+0x118>
     962:	59 c0       	rjmp	.+178    	; 0xa16 <vfprintf+0x1ca>
     964:	21 c0       	rjmp	.+66     	; 0x9a8 <vfprintf+0x15c>
     966:	f8 01       	movw	r30, r16
     968:	80 81       	ld	r24, Z
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	0e 5f       	subi	r16, 0xFE	; 254
     96e:	1f 4f       	sbci	r17, 0xFF	; 255
     970:	88 24       	eor	r8, r8
     972:	83 94       	inc	r8
     974:	91 2c       	mov	r9, r1
     976:	53 01       	movw	r10, r6
     978:	13 c0       	rjmp	.+38     	; 0x9a0 <vfprintf+0x154>
     97a:	28 01       	movw	r4, r16
     97c:	f2 e0       	ldi	r31, 0x02	; 2
     97e:	4f 0e       	add	r4, r31
     980:	51 1c       	adc	r5, r1
     982:	f8 01       	movw	r30, r16
     984:	a0 80       	ld	r10, Z
     986:	b1 80       	ldd	r11, Z+1	; 0x01
     988:	36 fe       	sbrs	r3, 6
     98a:	03 c0       	rjmp	.+6      	; 0x992 <vfprintf+0x146>
     98c:	69 2d       	mov	r22, r9
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	02 c0       	rjmp	.+4      	; 0x996 <vfprintf+0x14a>
     992:	6f ef       	ldi	r22, 0xFF	; 255
     994:	7f ef       	ldi	r23, 0xFF	; 255
     996:	c5 01       	movw	r24, r10
     998:	0e 94 56 07 	call	0xeac	; 0xeac <strnlen>
     99c:	4c 01       	movw	r8, r24
     99e:	82 01       	movw	r16, r4
     9a0:	f3 2d       	mov	r31, r3
     9a2:	ff 77       	andi	r31, 0x7F	; 127
     9a4:	3f 2e       	mov	r3, r31
     9a6:	16 c0       	rjmp	.+44     	; 0x9d4 <vfprintf+0x188>
     9a8:	28 01       	movw	r4, r16
     9aa:	22 e0       	ldi	r18, 0x02	; 2
     9ac:	42 0e       	add	r4, r18
     9ae:	51 1c       	adc	r5, r1
     9b0:	f8 01       	movw	r30, r16
     9b2:	a0 80       	ld	r10, Z
     9b4:	b1 80       	ldd	r11, Z+1	; 0x01
     9b6:	36 fe       	sbrs	r3, 6
     9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <vfprintf+0x174>
     9ba:	69 2d       	mov	r22, r9
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <vfprintf+0x178>
     9c0:	6f ef       	ldi	r22, 0xFF	; 255
     9c2:	7f ef       	ldi	r23, 0xFF	; 255
     9c4:	c5 01       	movw	r24, r10
     9c6:	0e 94 44 07 	call	0xe88	; 0xe88 <strnlen_P>
     9ca:	4c 01       	movw	r8, r24
     9cc:	f3 2d       	mov	r31, r3
     9ce:	f0 68       	ori	r31, 0x80	; 128
     9d0:	3f 2e       	mov	r3, r31
     9d2:	82 01       	movw	r16, r4
     9d4:	33 fc       	sbrc	r3, 3
     9d6:	1b c0       	rjmp	.+54     	; 0xa0e <vfprintf+0x1c2>
     9d8:	82 2d       	mov	r24, r2
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	88 16       	cp	r8, r24
     9de:	99 06       	cpc	r9, r25
     9e0:	b0 f4       	brcc	.+44     	; 0xa0e <vfprintf+0x1c2>
     9e2:	b6 01       	movw	r22, r12
     9e4:	80 e2       	ldi	r24, 0x20	; 32
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 61 07 	call	0xec2	; 0xec2 <fputc>
     9ec:	2a 94       	dec	r2
     9ee:	f4 cf       	rjmp	.-24     	; 0x9d8 <vfprintf+0x18c>
     9f0:	f5 01       	movw	r30, r10
     9f2:	37 fc       	sbrc	r3, 7
     9f4:	85 91       	lpm	r24, Z+
     9f6:	37 fe       	sbrs	r3, 7
     9f8:	81 91       	ld	r24, Z+
     9fa:	5f 01       	movw	r10, r30
     9fc:	b6 01       	movw	r22, r12
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 61 07 	call	0xec2	; 0xec2 <fputc>
     a04:	21 10       	cpse	r2, r1
     a06:	2a 94       	dec	r2
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	82 1a       	sub	r8, r18
     a0c:	91 08       	sbc	r9, r1
     a0e:	81 14       	cp	r8, r1
     a10:	91 04       	cpc	r9, r1
     a12:	71 f7       	brne	.-36     	; 0x9f0 <vfprintf+0x1a4>
     a14:	e8 c0       	rjmp	.+464    	; 0xbe6 <vfprintf+0x39a>
     a16:	84 36       	cpi	r24, 0x64	; 100
     a18:	11 f0       	breq	.+4      	; 0xa1e <vfprintf+0x1d2>
     a1a:	89 36       	cpi	r24, 0x69	; 105
     a1c:	41 f5       	brne	.+80     	; 0xa6e <vfprintf+0x222>
     a1e:	f8 01       	movw	r30, r16
     a20:	37 fe       	sbrs	r3, 7
     a22:	07 c0       	rjmp	.+14     	; 0xa32 <vfprintf+0x1e6>
     a24:	60 81       	ld	r22, Z
     a26:	71 81       	ldd	r23, Z+1	; 0x01
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	0c 5f       	subi	r16, 0xFC	; 252
     a2e:	1f 4f       	sbci	r17, 0xFF	; 255
     a30:	08 c0       	rjmp	.+16     	; 0xa42 <vfprintf+0x1f6>
     a32:	60 81       	ld	r22, Z
     a34:	71 81       	ldd	r23, Z+1	; 0x01
     a36:	07 2e       	mov	r0, r23
     a38:	00 0c       	add	r0, r0
     a3a:	88 0b       	sbc	r24, r24
     a3c:	99 0b       	sbc	r25, r25
     a3e:	0e 5f       	subi	r16, 0xFE	; 254
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	f3 2d       	mov	r31, r3
     a44:	ff 76       	andi	r31, 0x6F	; 111
     a46:	3f 2e       	mov	r3, r31
     a48:	97 ff       	sbrs	r25, 7
     a4a:	09 c0       	rjmp	.+18     	; 0xa5e <vfprintf+0x212>
     a4c:	90 95       	com	r25
     a4e:	80 95       	com	r24
     a50:	70 95       	com	r23
     a52:	61 95       	neg	r22
     a54:	7f 4f       	sbci	r23, 0xFF	; 255
     a56:	8f 4f       	sbci	r24, 0xFF	; 255
     a58:	9f 4f       	sbci	r25, 0xFF	; 255
     a5a:	f0 68       	ori	r31, 0x80	; 128
     a5c:	3f 2e       	mov	r3, r31
     a5e:	2a e0       	ldi	r18, 0x0A	; 10
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	a3 01       	movw	r20, r6
     a64:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__ultoa_invert>
     a68:	88 2e       	mov	r8, r24
     a6a:	86 18       	sub	r8, r6
     a6c:	45 c0       	rjmp	.+138    	; 0xaf8 <vfprintf+0x2ac>
     a6e:	85 37       	cpi	r24, 0x75	; 117
     a70:	31 f4       	brne	.+12     	; 0xa7e <vfprintf+0x232>
     a72:	23 2d       	mov	r18, r3
     a74:	2f 7e       	andi	r18, 0xEF	; 239
     a76:	b2 2e       	mov	r11, r18
     a78:	2a e0       	ldi	r18, 0x0A	; 10
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	25 c0       	rjmp	.+74     	; 0xac8 <vfprintf+0x27c>
     a7e:	93 2d       	mov	r25, r3
     a80:	99 7f       	andi	r25, 0xF9	; 249
     a82:	b9 2e       	mov	r11, r25
     a84:	8f 36       	cpi	r24, 0x6F	; 111
     a86:	c1 f0       	breq	.+48     	; 0xab8 <vfprintf+0x26c>
     a88:	18 f4       	brcc	.+6      	; 0xa90 <vfprintf+0x244>
     a8a:	88 35       	cpi	r24, 0x58	; 88
     a8c:	79 f0       	breq	.+30     	; 0xaac <vfprintf+0x260>
     a8e:	b5 c0       	rjmp	.+362    	; 0xbfa <vfprintf+0x3ae>
     a90:	80 37       	cpi	r24, 0x70	; 112
     a92:	19 f0       	breq	.+6      	; 0xa9a <vfprintf+0x24e>
     a94:	88 37       	cpi	r24, 0x78	; 120
     a96:	21 f0       	breq	.+8      	; 0xaa0 <vfprintf+0x254>
     a98:	b0 c0       	rjmp	.+352    	; 0xbfa <vfprintf+0x3ae>
     a9a:	e9 2f       	mov	r30, r25
     a9c:	e0 61       	ori	r30, 0x10	; 16
     a9e:	be 2e       	mov	r11, r30
     aa0:	b4 fe       	sbrs	r11, 4
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <vfprintf+0x272>
     aa4:	fb 2d       	mov	r31, r11
     aa6:	f4 60       	ori	r31, 0x04	; 4
     aa8:	bf 2e       	mov	r11, r31
     aaa:	09 c0       	rjmp	.+18     	; 0xabe <vfprintf+0x272>
     aac:	34 fe       	sbrs	r3, 4
     aae:	0a c0       	rjmp	.+20     	; 0xac4 <vfprintf+0x278>
     ab0:	29 2f       	mov	r18, r25
     ab2:	26 60       	ori	r18, 0x06	; 6
     ab4:	b2 2e       	mov	r11, r18
     ab6:	06 c0       	rjmp	.+12     	; 0xac4 <vfprintf+0x278>
     ab8:	28 e0       	ldi	r18, 0x08	; 8
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <vfprintf+0x27c>
     abe:	20 e1       	ldi	r18, 0x10	; 16
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <vfprintf+0x27c>
     ac4:	20 e1       	ldi	r18, 0x10	; 16
     ac6:	32 e0       	ldi	r19, 0x02	; 2
     ac8:	f8 01       	movw	r30, r16
     aca:	b7 fe       	sbrs	r11, 7
     acc:	07 c0       	rjmp	.+14     	; 0xadc <vfprintf+0x290>
     ace:	60 81       	ld	r22, Z
     ad0:	71 81       	ldd	r23, Z+1	; 0x01
     ad2:	82 81       	ldd	r24, Z+2	; 0x02
     ad4:	93 81       	ldd	r25, Z+3	; 0x03
     ad6:	0c 5f       	subi	r16, 0xFC	; 252
     ad8:	1f 4f       	sbci	r17, 0xFF	; 255
     ada:	06 c0       	rjmp	.+12     	; 0xae8 <vfprintf+0x29c>
     adc:	60 81       	ld	r22, Z
     ade:	71 81       	ldd	r23, Z+1	; 0x01
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 5f       	subi	r16, 0xFE	; 254
     ae6:	1f 4f       	sbci	r17, 0xFF	; 255
     ae8:	a3 01       	movw	r20, r6
     aea:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__ultoa_invert>
     aee:	88 2e       	mov	r8, r24
     af0:	86 18       	sub	r8, r6
     af2:	fb 2d       	mov	r31, r11
     af4:	ff 77       	andi	r31, 0x7F	; 127
     af6:	3f 2e       	mov	r3, r31
     af8:	36 fe       	sbrs	r3, 6
     afa:	0d c0       	rjmp	.+26     	; 0xb16 <vfprintf+0x2ca>
     afc:	23 2d       	mov	r18, r3
     afe:	2e 7f       	andi	r18, 0xFE	; 254
     b00:	a2 2e       	mov	r10, r18
     b02:	89 14       	cp	r8, r9
     b04:	58 f4       	brcc	.+22     	; 0xb1c <vfprintf+0x2d0>
     b06:	34 fe       	sbrs	r3, 4
     b08:	0b c0       	rjmp	.+22     	; 0xb20 <vfprintf+0x2d4>
     b0a:	32 fc       	sbrc	r3, 2
     b0c:	09 c0       	rjmp	.+18     	; 0xb20 <vfprintf+0x2d4>
     b0e:	83 2d       	mov	r24, r3
     b10:	8e 7e       	andi	r24, 0xEE	; 238
     b12:	a8 2e       	mov	r10, r24
     b14:	05 c0       	rjmp	.+10     	; 0xb20 <vfprintf+0x2d4>
     b16:	b8 2c       	mov	r11, r8
     b18:	a3 2c       	mov	r10, r3
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <vfprintf+0x2d6>
     b1c:	b8 2c       	mov	r11, r8
     b1e:	01 c0       	rjmp	.+2      	; 0xb22 <vfprintf+0x2d6>
     b20:	b9 2c       	mov	r11, r9
     b22:	a4 fe       	sbrs	r10, 4
     b24:	0f c0       	rjmp	.+30     	; 0xb44 <vfprintf+0x2f8>
     b26:	fe 01       	movw	r30, r28
     b28:	e8 0d       	add	r30, r8
     b2a:	f1 1d       	adc	r31, r1
     b2c:	80 81       	ld	r24, Z
     b2e:	80 33       	cpi	r24, 0x30	; 48
     b30:	21 f4       	brne	.+8      	; 0xb3a <vfprintf+0x2ee>
     b32:	9a 2d       	mov	r25, r10
     b34:	99 7e       	andi	r25, 0xE9	; 233
     b36:	a9 2e       	mov	r10, r25
     b38:	09 c0       	rjmp	.+18     	; 0xb4c <vfprintf+0x300>
     b3a:	a2 fe       	sbrs	r10, 2
     b3c:	06 c0       	rjmp	.+12     	; 0xb4a <vfprintf+0x2fe>
     b3e:	b3 94       	inc	r11
     b40:	b3 94       	inc	r11
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <vfprintf+0x300>
     b44:	8a 2d       	mov	r24, r10
     b46:	86 78       	andi	r24, 0x86	; 134
     b48:	09 f0       	breq	.+2      	; 0xb4c <vfprintf+0x300>
     b4a:	b3 94       	inc	r11
     b4c:	a3 fc       	sbrc	r10, 3
     b4e:	11 c0       	rjmp	.+34     	; 0xb72 <vfprintf+0x326>
     b50:	a0 fe       	sbrs	r10, 0
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <vfprintf+0x314>
     b54:	b2 14       	cp	r11, r2
     b56:	88 f4       	brcc	.+34     	; 0xb7a <vfprintf+0x32e>
     b58:	28 0c       	add	r2, r8
     b5a:	92 2c       	mov	r9, r2
     b5c:	9b 18       	sub	r9, r11
     b5e:	0e c0       	rjmp	.+28     	; 0xb7c <vfprintf+0x330>
     b60:	b2 14       	cp	r11, r2
     b62:	60 f4       	brcc	.+24     	; 0xb7c <vfprintf+0x330>
     b64:	b6 01       	movw	r22, r12
     b66:	80 e2       	ldi	r24, 0x20	; 32
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 61 07 	call	0xec2	; 0xec2 <fputc>
     b6e:	b3 94       	inc	r11
     b70:	f7 cf       	rjmp	.-18     	; 0xb60 <vfprintf+0x314>
     b72:	b2 14       	cp	r11, r2
     b74:	18 f4       	brcc	.+6      	; 0xb7c <vfprintf+0x330>
     b76:	2b 18       	sub	r2, r11
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x332>
     b7a:	98 2c       	mov	r9, r8
     b7c:	21 2c       	mov	r2, r1
     b7e:	a4 fe       	sbrs	r10, 4
     b80:	10 c0       	rjmp	.+32     	; 0xba2 <vfprintf+0x356>
     b82:	b6 01       	movw	r22, r12
     b84:	80 e3       	ldi	r24, 0x30	; 48
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 61 07 	call	0xec2	; 0xec2 <fputc>
     b8c:	a2 fe       	sbrs	r10, 2
     b8e:	17 c0       	rjmp	.+46     	; 0xbbe <vfprintf+0x372>
     b90:	a1 fc       	sbrc	r10, 1
     b92:	03 c0       	rjmp	.+6      	; 0xb9a <vfprintf+0x34e>
     b94:	88 e7       	ldi	r24, 0x78	; 120
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <vfprintf+0x352>
     b9a:	88 e5       	ldi	r24, 0x58	; 88
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	b6 01       	movw	r22, r12
     ba0:	0c c0       	rjmp	.+24     	; 0xbba <vfprintf+0x36e>
     ba2:	8a 2d       	mov	r24, r10
     ba4:	86 78       	andi	r24, 0x86	; 134
     ba6:	59 f0       	breq	.+22     	; 0xbbe <vfprintf+0x372>
     ba8:	a1 fe       	sbrs	r10, 1
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <vfprintf+0x364>
     bac:	8b e2       	ldi	r24, 0x2B	; 43
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <vfprintf+0x366>
     bb0:	80 e2       	ldi	r24, 0x20	; 32
     bb2:	a7 fc       	sbrc	r10, 7
     bb4:	8d e2       	ldi	r24, 0x2D	; 45
     bb6:	b6 01       	movw	r22, r12
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 61 07 	call	0xec2	; 0xec2 <fputc>
     bbe:	89 14       	cp	r8, r9
     bc0:	38 f4       	brcc	.+14     	; 0xbd0 <vfprintf+0x384>
     bc2:	b6 01       	movw	r22, r12
     bc4:	80 e3       	ldi	r24, 0x30	; 48
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 61 07 	call	0xec2	; 0xec2 <fputc>
     bcc:	9a 94       	dec	r9
     bce:	f7 cf       	rjmp	.-18     	; 0xbbe <vfprintf+0x372>
     bd0:	8a 94       	dec	r8
     bd2:	f3 01       	movw	r30, r6
     bd4:	e8 0d       	add	r30, r8
     bd6:	f1 1d       	adc	r31, r1
     bd8:	80 81       	ld	r24, Z
     bda:	b6 01       	movw	r22, r12
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 61 07 	call	0xec2	; 0xec2 <fputc>
     be2:	81 10       	cpse	r8, r1
     be4:	f5 cf       	rjmp	.-22     	; 0xbd0 <vfprintf+0x384>
     be6:	22 20       	and	r2, r2
     be8:	09 f4       	brne	.+2      	; 0xbec <vfprintf+0x3a0>
     bea:	42 ce       	rjmp	.-892    	; 0x870 <vfprintf+0x24>
     bec:	b6 01       	movw	r22, r12
     bee:	80 e2       	ldi	r24, 0x20	; 32
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 61 07 	call	0xec2	; 0xec2 <fputc>
     bf6:	2a 94       	dec	r2
     bf8:	f6 cf       	rjmp	.-20     	; 0xbe6 <vfprintf+0x39a>
     bfa:	f6 01       	movw	r30, r12
     bfc:	86 81       	ldd	r24, Z+6	; 0x06
     bfe:	97 81       	ldd	r25, Z+7	; 0x07
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <vfprintf+0x3ba>
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	9f ef       	ldi	r25, 0xFF	; 255
     c06:	2b 96       	adiw	r28, 0x0b	; 11
     c08:	e2 e1       	ldi	r30, 0x12	; 18
     c0a:	0c 94 17 08 	jmp	0x102e	; 0x102e <__epilogue_restores__>

00000c0e <calloc>:
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	86 9f       	mul	r24, r22
     c18:	80 01       	movw	r16, r0
     c1a:	87 9f       	mul	r24, r23
     c1c:	10 0d       	add	r17, r0
     c1e:	96 9f       	mul	r25, r22
     c20:	10 0d       	add	r17, r0
     c22:	11 24       	eor	r1, r1
     c24:	c8 01       	movw	r24, r16
     c26:	0e 94 23 06 	call	0xc46	; 0xc46 <malloc>
     c2a:	ec 01       	movw	r28, r24
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	29 f0       	breq	.+10     	; 0xc3a <calloc+0x2c>
     c30:	a8 01       	movw	r20, r16
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	0e 94 4f 07 	call	0xe9e	; 0xe9e <memset>
     c3a:	ce 01       	movw	r24, r28
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	08 95       	ret

00000c46 <malloc>:
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	91 05       	cpc	r25, r1
     c52:	10 f4       	brcc	.+4      	; 0xc58 <malloc+0x12>
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <__flp>
     c5c:	f0 91 61 03 	lds	r31, 0x0361	; 0x800361 <__flp+0x1>
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	a0 e0       	ldi	r26, 0x00	; 0
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	30 97       	sbiw	r30, 0x00	; 0
     c6a:	19 f1       	breq	.+70     	; 0xcb2 <malloc+0x6c>
     c6c:	40 81       	ld	r20, Z
     c6e:	51 81       	ldd	r21, Z+1	; 0x01
     c70:	02 81       	ldd	r16, Z+2	; 0x02
     c72:	13 81       	ldd	r17, Z+3	; 0x03
     c74:	48 17       	cp	r20, r24
     c76:	59 07       	cpc	r21, r25
     c78:	c8 f0       	brcs	.+50     	; 0xcac <malloc+0x66>
     c7a:	84 17       	cp	r24, r20
     c7c:	95 07       	cpc	r25, r21
     c7e:	69 f4       	brne	.+26     	; 0xc9a <malloc+0x54>
     c80:	10 97       	sbiw	r26, 0x00	; 0
     c82:	31 f0       	breq	.+12     	; 0xc90 <malloc+0x4a>
     c84:	12 96       	adiw	r26, 0x02	; 2
     c86:	0c 93       	st	X, r16
     c88:	12 97       	sbiw	r26, 0x02	; 2
     c8a:	13 96       	adiw	r26, 0x03	; 3
     c8c:	1c 93       	st	X, r17
     c8e:	27 c0       	rjmp	.+78     	; 0xcde <malloc+0x98>
     c90:	00 93 60 03 	sts	0x0360, r16	; 0x800360 <__flp>
     c94:	10 93 61 03 	sts	0x0361, r17	; 0x800361 <__flp+0x1>
     c98:	22 c0       	rjmp	.+68     	; 0xcde <malloc+0x98>
     c9a:	21 15       	cp	r18, r1
     c9c:	31 05       	cpc	r19, r1
     c9e:	19 f0       	breq	.+6      	; 0xca6 <malloc+0x60>
     ca0:	42 17       	cp	r20, r18
     ca2:	53 07       	cpc	r21, r19
     ca4:	18 f4       	brcc	.+6      	; 0xcac <malloc+0x66>
     ca6:	9a 01       	movw	r18, r20
     ca8:	bd 01       	movw	r22, r26
     caa:	ef 01       	movw	r28, r30
     cac:	df 01       	movw	r26, r30
     cae:	f8 01       	movw	r30, r16
     cb0:	db cf       	rjmp	.-74     	; 0xc68 <malloc+0x22>
     cb2:	21 15       	cp	r18, r1
     cb4:	31 05       	cpc	r19, r1
     cb6:	f9 f0       	breq	.+62     	; 0xcf6 <malloc+0xb0>
     cb8:	28 1b       	sub	r18, r24
     cba:	39 0b       	sbc	r19, r25
     cbc:	24 30       	cpi	r18, 0x04	; 4
     cbe:	31 05       	cpc	r19, r1
     cc0:	80 f4       	brcc	.+32     	; 0xce2 <malloc+0x9c>
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	9b 81       	ldd	r25, Y+3	; 0x03
     cc6:	61 15       	cp	r22, r1
     cc8:	71 05       	cpc	r23, r1
     cca:	21 f0       	breq	.+8      	; 0xcd4 <malloc+0x8e>
     ccc:	fb 01       	movw	r30, r22
     cce:	93 83       	std	Z+3, r25	; 0x03
     cd0:	82 83       	std	Z+2, r24	; 0x02
     cd2:	04 c0       	rjmp	.+8      	; 0xcdc <malloc+0x96>
     cd4:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <__flp+0x1>
     cd8:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <__flp>
     cdc:	fe 01       	movw	r30, r28
     cde:	32 96       	adiw	r30, 0x02	; 2
     ce0:	44 c0       	rjmp	.+136    	; 0xd6a <malloc+0x124>
     ce2:	fe 01       	movw	r30, r28
     ce4:	e2 0f       	add	r30, r18
     ce6:	f3 1f       	adc	r31, r19
     ce8:	81 93       	st	Z+, r24
     cea:	91 93       	st	Z+, r25
     cec:	22 50       	subi	r18, 0x02	; 2
     cee:	31 09       	sbc	r19, r1
     cf0:	39 83       	std	Y+1, r19	; 0x01
     cf2:	28 83       	st	Y, r18
     cf4:	3a c0       	rjmp	.+116    	; 0xd6a <malloc+0x124>
     cf6:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <__brkval>
     cfa:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <__brkval+0x1>
     cfe:	23 2b       	or	r18, r19
     d00:	41 f4       	brne	.+16     	; 0xd12 <malloc+0xcc>
     d02:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     d06:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     d0a:	30 93 5f 03 	sts	0x035F, r19	; 0x80035f <__brkval+0x1>
     d0e:	20 93 5e 03 	sts	0x035E, r18	; 0x80035e <__brkval>
     d12:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d16:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	41 f4       	brne	.+16     	; 0xd30 <malloc+0xea>
     d20:	2d b7       	in	r18, 0x3d	; 61
     d22:	3e b7       	in	r19, 0x3e	; 62
     d24:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     d28:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     d2c:	24 1b       	sub	r18, r20
     d2e:	35 0b       	sbc	r19, r21
     d30:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <__brkval>
     d34:	f0 91 5f 03 	lds	r31, 0x035F	; 0x80035f <__brkval+0x1>
     d38:	e2 17       	cp	r30, r18
     d3a:	f3 07       	cpc	r31, r19
     d3c:	a0 f4       	brcc	.+40     	; 0xd66 <malloc+0x120>
     d3e:	2e 1b       	sub	r18, r30
     d40:	3f 0b       	sbc	r19, r31
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	78 f0       	brcs	.+30     	; 0xd66 <malloc+0x120>
     d48:	ac 01       	movw	r20, r24
     d4a:	4e 5f       	subi	r20, 0xFE	; 254
     d4c:	5f 4f       	sbci	r21, 0xFF	; 255
     d4e:	24 17       	cp	r18, r20
     d50:	35 07       	cpc	r19, r21
     d52:	48 f0       	brcs	.+18     	; 0xd66 <malloc+0x120>
     d54:	4e 0f       	add	r20, r30
     d56:	5f 1f       	adc	r21, r31
     d58:	50 93 5f 03 	sts	0x035F, r21	; 0x80035f <__brkval+0x1>
     d5c:	40 93 5e 03 	sts	0x035E, r20	; 0x80035e <__brkval>
     d60:	81 93       	st	Z+, r24
     d62:	91 93       	st	Z+, r25
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <malloc+0x124>
     d66:	e0 e0       	ldi	r30, 0x00	; 0
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	cf 01       	movw	r24, r30
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <free>:
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	09 f4       	brne	.+2      	; 0xd80 <free+0xa>
     d7e:	81 c0       	rjmp	.+258    	; 0xe82 <free+0x10c>
     d80:	fc 01       	movw	r30, r24
     d82:	32 97       	sbiw	r30, 0x02	; 2
     d84:	13 82       	std	Z+3, r1	; 0x03
     d86:	12 82       	std	Z+2, r1	; 0x02
     d88:	a0 91 60 03 	lds	r26, 0x0360	; 0x800360 <__flp>
     d8c:	b0 91 61 03 	lds	r27, 0x0361	; 0x800361 <__flp+0x1>
     d90:	10 97       	sbiw	r26, 0x00	; 0
     d92:	81 f4       	brne	.+32     	; 0xdb4 <free+0x3e>
     d94:	20 81       	ld	r18, Z
     d96:	31 81       	ldd	r19, Z+1	; 0x01
     d98:	82 0f       	add	r24, r18
     d9a:	93 1f       	adc	r25, r19
     d9c:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <__brkval>
     da0:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <__brkval+0x1>
     da4:	28 17       	cp	r18, r24
     da6:	39 07       	cpc	r19, r25
     da8:	51 f5       	brne	.+84     	; 0xdfe <free+0x88>
     daa:	f0 93 5f 03 	sts	0x035F, r31	; 0x80035f <__brkval+0x1>
     dae:	e0 93 5e 03 	sts	0x035E, r30	; 0x80035e <__brkval>
     db2:	67 c0       	rjmp	.+206    	; 0xe82 <free+0x10c>
     db4:	ed 01       	movw	r28, r26
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	ce 17       	cp	r28, r30
     dbc:	df 07       	cpc	r29, r31
     dbe:	40 f4       	brcc	.+16     	; 0xdd0 <free+0x5a>
     dc0:	4a 81       	ldd	r20, Y+2	; 0x02
     dc2:	5b 81       	ldd	r21, Y+3	; 0x03
     dc4:	9e 01       	movw	r18, r28
     dc6:	41 15       	cp	r20, r1
     dc8:	51 05       	cpc	r21, r1
     dca:	f1 f0       	breq	.+60     	; 0xe08 <free+0x92>
     dcc:	ea 01       	movw	r28, r20
     dce:	f5 cf       	rjmp	.-22     	; 0xdba <free+0x44>
     dd0:	d3 83       	std	Z+3, r29	; 0x03
     dd2:	c2 83       	std	Z+2, r28	; 0x02
     dd4:	40 81       	ld	r20, Z
     dd6:	51 81       	ldd	r21, Z+1	; 0x01
     dd8:	84 0f       	add	r24, r20
     dda:	95 1f       	adc	r25, r21
     ddc:	c8 17       	cp	r28, r24
     dde:	d9 07       	cpc	r29, r25
     de0:	59 f4       	brne	.+22     	; 0xdf8 <free+0x82>
     de2:	88 81       	ld	r24, Y
     de4:	99 81       	ldd	r25, Y+1	; 0x01
     de6:	84 0f       	add	r24, r20
     de8:	95 1f       	adc	r25, r21
     dea:	02 96       	adiw	r24, 0x02	; 2
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	80 83       	st	Z, r24
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	9b 81       	ldd	r25, Y+3	; 0x03
     df4:	93 83       	std	Z+3, r25	; 0x03
     df6:	82 83       	std	Z+2, r24	; 0x02
     df8:	21 15       	cp	r18, r1
     dfa:	31 05       	cpc	r19, r1
     dfc:	29 f4       	brne	.+10     	; 0xe08 <free+0x92>
     dfe:	f0 93 61 03 	sts	0x0361, r31	; 0x800361 <__flp+0x1>
     e02:	e0 93 60 03 	sts	0x0360, r30	; 0x800360 <__flp>
     e06:	3d c0       	rjmp	.+122    	; 0xe82 <free+0x10c>
     e08:	e9 01       	movw	r28, r18
     e0a:	fb 83       	std	Y+3, r31	; 0x03
     e0c:	ea 83       	std	Y+2, r30	; 0x02
     e0e:	49 91       	ld	r20, Y+
     e10:	59 91       	ld	r21, Y+
     e12:	c4 0f       	add	r28, r20
     e14:	d5 1f       	adc	r29, r21
     e16:	ec 17       	cp	r30, r28
     e18:	fd 07       	cpc	r31, r29
     e1a:	61 f4       	brne	.+24     	; 0xe34 <free+0xbe>
     e1c:	80 81       	ld	r24, Z
     e1e:	91 81       	ldd	r25, Z+1	; 0x01
     e20:	84 0f       	add	r24, r20
     e22:	95 1f       	adc	r25, r21
     e24:	02 96       	adiw	r24, 0x02	; 2
     e26:	e9 01       	movw	r28, r18
     e28:	99 83       	std	Y+1, r25	; 0x01
     e2a:	88 83       	st	Y, r24
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	9b 83       	std	Y+3, r25	; 0x03
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	e0 e0       	ldi	r30, 0x00	; 0
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	12 96       	adiw	r26, 0x02	; 2
     e3a:	8d 91       	ld	r24, X+
     e3c:	9c 91       	ld	r25, X
     e3e:	13 97       	sbiw	r26, 0x03	; 3
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	19 f0       	breq	.+6      	; 0xe4a <free+0xd4>
     e44:	fd 01       	movw	r30, r26
     e46:	dc 01       	movw	r26, r24
     e48:	f7 cf       	rjmp	.-18     	; 0xe38 <free+0xc2>
     e4a:	8d 91       	ld	r24, X+
     e4c:	9c 91       	ld	r25, X
     e4e:	11 97       	sbiw	r26, 0x01	; 1
     e50:	9d 01       	movw	r18, r26
     e52:	2e 5f       	subi	r18, 0xFE	; 254
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	82 0f       	add	r24, r18
     e58:	93 1f       	adc	r25, r19
     e5a:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <__brkval>
     e5e:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <__brkval+0x1>
     e62:	28 17       	cp	r18, r24
     e64:	39 07       	cpc	r19, r25
     e66:	69 f4       	brne	.+26     	; 0xe82 <free+0x10c>
     e68:	30 97       	sbiw	r30, 0x00	; 0
     e6a:	29 f4       	brne	.+10     	; 0xe76 <free+0x100>
     e6c:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <__flp+0x1>
     e70:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <__flp>
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <free+0x104>
     e76:	13 82       	std	Z+3, r1	; 0x03
     e78:	12 82       	std	Z+2, r1	; 0x02
     e7a:	b0 93 5f 03 	sts	0x035F, r27	; 0x80035f <__brkval+0x1>
     e7e:	a0 93 5e 03 	sts	0x035E, r26	; 0x80035e <__brkval>
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <strnlen_P>:
     e88:	fc 01       	movw	r30, r24
     e8a:	05 90       	lpm	r0, Z+
     e8c:	61 50       	subi	r22, 0x01	; 1
     e8e:	70 40       	sbci	r23, 0x00	; 0
     e90:	01 10       	cpse	r0, r1
     e92:	d8 f7       	brcc	.-10     	; 0xe8a <strnlen_P+0x2>
     e94:	80 95       	com	r24
     e96:	90 95       	com	r25
     e98:	8e 0f       	add	r24, r30
     e9a:	9f 1f       	adc	r25, r31
     e9c:	08 95       	ret

00000e9e <memset>:
     e9e:	dc 01       	movw	r26, r24
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <memset+0x6>
     ea2:	6d 93       	st	X+, r22
     ea4:	41 50       	subi	r20, 0x01	; 1
     ea6:	50 40       	sbci	r21, 0x00	; 0
     ea8:	e0 f7       	brcc	.-8      	; 0xea2 <memset+0x4>
     eaa:	08 95       	ret

00000eac <strnlen>:
     eac:	fc 01       	movw	r30, r24
     eae:	61 50       	subi	r22, 0x01	; 1
     eb0:	70 40       	sbci	r23, 0x00	; 0
     eb2:	01 90       	ld	r0, Z+
     eb4:	01 10       	cpse	r0, r1
     eb6:	d8 f7       	brcc	.-10     	; 0xeae <strnlen+0x2>
     eb8:	80 95       	com	r24
     eba:	90 95       	com	r25
     ebc:	8e 0f       	add	r24, r30
     ebe:	9f 1f       	adc	r25, r31
     ec0:	08 95       	ret

00000ec2 <fputc>:
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	fb 01       	movw	r30, r22
     ecc:	23 81       	ldd	r18, Z+3	; 0x03
     ece:	21 fd       	sbrc	r18, 1
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <fputc+0x16>
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	9f ef       	ldi	r25, 0xFF	; 255
     ed6:	2c c0       	rjmp	.+88     	; 0xf30 <fputc+0x6e>
     ed8:	22 ff       	sbrs	r18, 2
     eda:	16 c0       	rjmp	.+44     	; 0xf08 <fputc+0x46>
     edc:	46 81       	ldd	r20, Z+6	; 0x06
     ede:	57 81       	ldd	r21, Z+7	; 0x07
     ee0:	24 81       	ldd	r18, Z+4	; 0x04
     ee2:	35 81       	ldd	r19, Z+5	; 0x05
     ee4:	42 17       	cp	r20, r18
     ee6:	53 07       	cpc	r21, r19
     ee8:	44 f4       	brge	.+16     	; 0xefa <fputc+0x38>
     eea:	a0 81       	ld	r26, Z
     eec:	b1 81       	ldd	r27, Z+1	; 0x01
     eee:	9d 01       	movw	r18, r26
     ef0:	2f 5f       	subi	r18, 0xFF	; 255
     ef2:	3f 4f       	sbci	r19, 0xFF	; 255
     ef4:	31 83       	std	Z+1, r19	; 0x01
     ef6:	20 83       	st	Z, r18
     ef8:	8c 93       	st	X, r24
     efa:	26 81       	ldd	r18, Z+6	; 0x06
     efc:	37 81       	ldd	r19, Z+7	; 0x07
     efe:	2f 5f       	subi	r18, 0xFF	; 255
     f00:	3f 4f       	sbci	r19, 0xFF	; 255
     f02:	37 83       	std	Z+7, r19	; 0x07
     f04:	26 83       	std	Z+6, r18	; 0x06
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <fputc+0x6e>
     f08:	8b 01       	movw	r16, r22
     f0a:	ec 01       	movw	r28, r24
     f0c:	fb 01       	movw	r30, r22
     f0e:	00 84       	ldd	r0, Z+8	; 0x08
     f10:	f1 85       	ldd	r31, Z+9	; 0x09
     f12:	e0 2d       	mov	r30, r0
     f14:	09 95       	icall
     f16:	89 2b       	or	r24, r25
     f18:	e1 f6       	brne	.-72     	; 0xed2 <fputc+0x10>
     f1a:	d8 01       	movw	r26, r16
     f1c:	16 96       	adiw	r26, 0x06	; 6
     f1e:	8d 91       	ld	r24, X+
     f20:	9c 91       	ld	r25, X
     f22:	17 97       	sbiw	r26, 0x07	; 7
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	17 96       	adiw	r26, 0x07	; 7
     f28:	9c 93       	st	X, r25
     f2a:	8e 93       	st	-X, r24
     f2c:	16 97       	sbiw	r26, 0x06	; 6
     f2e:	ce 01       	movw	r24, r28
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <__ultoa_invert>:
     f3a:	fa 01       	movw	r30, r20
     f3c:	aa 27       	eor	r26, r26
     f3e:	28 30       	cpi	r18, 0x08	; 8
     f40:	51 f1       	breq	.+84     	; 0xf96 <__ultoa_invert+0x5c>
     f42:	20 31       	cpi	r18, 0x10	; 16
     f44:	81 f1       	breq	.+96     	; 0xfa6 <__ultoa_invert+0x6c>
     f46:	e8 94       	clt
     f48:	6f 93       	push	r22
     f4a:	6e 7f       	andi	r22, 0xFE	; 254
     f4c:	6e 5f       	subi	r22, 0xFE	; 254
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	8f 4f       	sbci	r24, 0xFF	; 255
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	af 4f       	sbci	r26, 0xFF	; 255
     f56:	b1 e0       	ldi	r27, 0x01	; 1
     f58:	3e d0       	rcall	.+124    	; 0xfd6 <__ultoa_invert+0x9c>
     f5a:	b4 e0       	ldi	r27, 0x04	; 4
     f5c:	3c d0       	rcall	.+120    	; 0xfd6 <__ultoa_invert+0x9c>
     f5e:	67 0f       	add	r22, r23
     f60:	78 1f       	adc	r23, r24
     f62:	89 1f       	adc	r24, r25
     f64:	9a 1f       	adc	r25, r26
     f66:	a1 1d       	adc	r26, r1
     f68:	68 0f       	add	r22, r24
     f6a:	79 1f       	adc	r23, r25
     f6c:	8a 1f       	adc	r24, r26
     f6e:	91 1d       	adc	r25, r1
     f70:	a1 1d       	adc	r26, r1
     f72:	6a 0f       	add	r22, r26
     f74:	71 1d       	adc	r23, r1
     f76:	81 1d       	adc	r24, r1
     f78:	91 1d       	adc	r25, r1
     f7a:	a1 1d       	adc	r26, r1
     f7c:	20 d0       	rcall	.+64     	; 0xfbe <__ultoa_invert+0x84>
     f7e:	09 f4       	brne	.+2      	; 0xf82 <__ultoa_invert+0x48>
     f80:	68 94       	set
     f82:	3f 91       	pop	r19
     f84:	2a e0       	ldi	r18, 0x0A	; 10
     f86:	26 9f       	mul	r18, r22
     f88:	11 24       	eor	r1, r1
     f8a:	30 19       	sub	r19, r0
     f8c:	30 5d       	subi	r19, 0xD0	; 208
     f8e:	31 93       	st	Z+, r19
     f90:	de f6       	brtc	.-74     	; 0xf48 <__ultoa_invert+0xe>
     f92:	cf 01       	movw	r24, r30
     f94:	08 95       	ret
     f96:	46 2f       	mov	r20, r22
     f98:	47 70       	andi	r20, 0x07	; 7
     f9a:	40 5d       	subi	r20, 0xD0	; 208
     f9c:	41 93       	st	Z+, r20
     f9e:	b3 e0       	ldi	r27, 0x03	; 3
     fa0:	0f d0       	rcall	.+30     	; 0xfc0 <__ultoa_invert+0x86>
     fa2:	c9 f7       	brne	.-14     	; 0xf96 <__ultoa_invert+0x5c>
     fa4:	f6 cf       	rjmp	.-20     	; 0xf92 <__ultoa_invert+0x58>
     fa6:	46 2f       	mov	r20, r22
     fa8:	4f 70       	andi	r20, 0x0F	; 15
     faa:	40 5d       	subi	r20, 0xD0	; 208
     fac:	4a 33       	cpi	r20, 0x3A	; 58
     fae:	18 f0       	brcs	.+6      	; 0xfb6 <__ultoa_invert+0x7c>
     fb0:	49 5d       	subi	r20, 0xD9	; 217
     fb2:	31 fd       	sbrc	r19, 1
     fb4:	40 52       	subi	r20, 0x20	; 32
     fb6:	41 93       	st	Z+, r20
     fb8:	02 d0       	rcall	.+4      	; 0xfbe <__ultoa_invert+0x84>
     fba:	a9 f7       	brne	.-22     	; 0xfa6 <__ultoa_invert+0x6c>
     fbc:	ea cf       	rjmp	.-44     	; 0xf92 <__ultoa_invert+0x58>
     fbe:	b4 e0       	ldi	r27, 0x04	; 4
     fc0:	a6 95       	lsr	r26
     fc2:	97 95       	ror	r25
     fc4:	87 95       	ror	r24
     fc6:	77 95       	ror	r23
     fc8:	67 95       	ror	r22
     fca:	ba 95       	dec	r27
     fcc:	c9 f7       	brne	.-14     	; 0xfc0 <__ultoa_invert+0x86>
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	61 05       	cpc	r22, r1
     fd2:	71 05       	cpc	r23, r1
     fd4:	08 95       	ret
     fd6:	9b 01       	movw	r18, r22
     fd8:	ac 01       	movw	r20, r24
     fda:	0a 2e       	mov	r0, r26
     fdc:	06 94       	lsr	r0
     fde:	57 95       	ror	r21
     fe0:	47 95       	ror	r20
     fe2:	37 95       	ror	r19
     fe4:	27 95       	ror	r18
     fe6:	ba 95       	dec	r27
     fe8:	c9 f7       	brne	.-14     	; 0xfdc <__ultoa_invert+0xa2>
     fea:	62 0f       	add	r22, r18
     fec:	73 1f       	adc	r23, r19
     fee:	84 1f       	adc	r24, r20
     ff0:	95 1f       	adc	r25, r21
     ff2:	a0 1d       	adc	r26, r0
     ff4:	08 95       	ret

00000ff6 <__prologue_saves__>:
     ff6:	2f 92       	push	r2
     ff8:	3f 92       	push	r3
     ffa:	4f 92       	push	r4
     ffc:	5f 92       	push	r5
     ffe:	6f 92       	push	r6
    1000:	7f 92       	push	r7
    1002:	8f 92       	push	r8
    1004:	9f 92       	push	r9
    1006:	af 92       	push	r10
    1008:	bf 92       	push	r11
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	ca 1b       	sub	r28, r26
    1020:	db 0b       	sbc	r29, r27
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	09 94       	ijmp

0000102e <__epilogue_restores__>:
    102e:	2a 88       	ldd	r2, Y+18	; 0x12
    1030:	39 88       	ldd	r3, Y+17	; 0x11
    1032:	48 88       	ldd	r4, Y+16	; 0x10
    1034:	5f 84       	ldd	r5, Y+15	; 0x0f
    1036:	6e 84       	ldd	r6, Y+14	; 0x0e
    1038:	7d 84       	ldd	r7, Y+13	; 0x0d
    103a:	8c 84       	ldd	r8, Y+12	; 0x0c
    103c:	9b 84       	ldd	r9, Y+11	; 0x0b
    103e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1040:	b9 84       	ldd	r11, Y+9	; 0x09
    1042:	c8 84       	ldd	r12, Y+8	; 0x08
    1044:	df 80       	ldd	r13, Y+7	; 0x07
    1046:	ee 80       	ldd	r14, Y+6	; 0x06
    1048:	fd 80       	ldd	r15, Y+5	; 0x05
    104a:	0c 81       	ldd	r16, Y+4	; 0x04
    104c:	1b 81       	ldd	r17, Y+3	; 0x03
    104e:	aa 81       	ldd	r26, Y+2	; 0x02
    1050:	b9 81       	ldd	r27, Y+1	; 0x01
    1052:	ce 0f       	add	r28, r30
    1054:	d1 1d       	adc	r29, r1
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	ed 01       	movw	r28, r26
    1062:	08 95       	ret

00001064 <_exit>:
    1064:	f8 94       	cli

00001066 <__stop_program>:
    1066:	ff cf       	rjmp	.-2      	; 0x1066 <__stop_program>
